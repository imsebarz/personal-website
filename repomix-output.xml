This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
public/
  images/
    hero (1).webp:Zone.Identifier
    sebas (1).webp:Zone.Identifier
    wave-bg.svg
  site.webmanifest
scripts/
  test-webhook.js
src/
  app/
    api/
      notion-webhook/
        route.ts
    layout.tsx
    page.tsx
  components/
    common/
      Icon.tsx
    AboutMe.tsx
    Contact.tsx
    FeaturedProject.tsx
    FeaturedProjects.tsx
    FloatMail.tsx
    FloatSocial.tsx
    Footer.tsx
    Hero.tsx
    MyWork.tsx
    Nav.tsx
    Project.tsx
  config/
    constants.ts
  data/
    aboutme.json
    contact.json
    nav.json
    projects.json
  hooks/
    useData.ts
  styles/
    aboutme.scss
    colors.scss
    contact.scss
    featuredproject.scss
    featuredprojects.scss
    floatmail.scss
    floatsocial.scss
    footer.scss
    globals.scss
    hero.scss
    mixins.scss
    mywork.scss
    nav.scss
    project.scss
  types/
    assets.d.ts
    index.ts
    notion-todoist.ts
  utils/
    animation.ts
    helpers.ts
    notion-client.ts
    openai-client.ts
    todoist-client.ts
    webhook-validation.ts
  animation.js
.env.example
.eslintrc.json
.gitignore
next.config.js
NOTION_TODOIST_README.md
package.json
README.md
site.webmanifest
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/images/hero (1).webp:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
HostUrl=https://squoosh.app/
</file>

<file path="public/images/sebas (1).webp:Zone.Identifier">
[ZoneTransfer]
ZoneId=3
HostUrl=https://squoosh.app/
</file>

<file path="public/images/wave-bg.svg">
<svg id="visual" viewBox="0 0 900 600" width="900" height="600" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><rect x="0" y="0" width="900" height="600" fill="#e4fdeb"></rect><defs><linearGradient id="grad1_0" x1="33.3%" y1="0%" x2="100%" y2="100%"><stop offset="20%" stop-color="#004747" stop-opacity="1"></stop><stop offset="80%" stop-color="#004747" stop-opacity="1"></stop></linearGradient></defs><defs><linearGradient id="grad1_1" x1="33.3%" y1="0%" x2="100%" y2="100%"><stop offset="20%" stop-color="#004747" stop-opacity="1"></stop><stop offset="80%" stop-color="#759e92" stop-opacity="1"></stop></linearGradient></defs><defs><linearGradient id="grad1_2" x1="33.3%" y1="0%" x2="100%" y2="100%"><stop offset="20%" stop-color="#e4fdeb" stop-opacity="1"></stop><stop offset="80%" stop-color="#759e92" stop-opacity="1"></stop></linearGradient></defs><defs><linearGradient id="grad2_0" x1="0%" y1="0%" x2="66.7%" y2="100%"><stop offset="20%" stop-color="#004747" stop-opacity="1"></stop><stop offset="80%" stop-color="#004747" stop-opacity="1"></stop></linearGradient></defs><defs><linearGradient id="grad2_1" x1="0%" y1="0%" x2="66.7%" y2="100%"><stop offset="20%" stop-color="#759e92" stop-opacity="1"></stop><stop offset="80%" stop-color="#004747" stop-opacity="1"></stop></linearGradient></defs><defs><linearGradient id="grad2_2" x1="0%" y1="0%" x2="66.7%" y2="100%"><stop offset="20%" stop-color="#759e92" stop-opacity="1"></stop><stop offset="80%" stop-color="#e4fdeb" stop-opacity="1"></stop></linearGradient></defs><g transform="translate(900, 0)"><path d="M0 405.6C-74.9 397.3 -149.8 389 -202.8 351.3C-255.8 313.6 -286.8 246.4 -317 183C-347.1 119.6 -376.4 59.8 -405.6 0L0 0Z" fill="#acccbd"></path><path d="M0 270.4C-49.9 264.9 -99.9 259.3 -135.2 234.2C-170.5 209 -191.2 164.3 -211.3 122C-231.4 79.7 -250.9 39.9 -270.4 0L0 0Z" fill="#41716b"></path><path d="M0 135.2C-25 132.4 -49.9 129.7 -67.6 117.1C-85.3 104.5 -95.6 82.1 -105.7 61C-115.7 39.9 -125.5 19.9 -135.2 0L0 0Z" fill="#004747"></path></g><g transform="translate(0, 600)"><path d="M0 -405.6C72.7 -396 145.4 -386.5 202.8 -351.3C260.2 -316.1 302.2 -255.3 333.4 -192.5C364.7 -129.7 385.1 -64.8 405.6 0L0 0Z" fill="#acccbd"></path><path d="M0 -270.4C48.5 -264 97 -257.6 135.2 -234.2C173.5 -210.7 201.5 -170.2 222.3 -128.3C243.1 -86.5 256.8 -43.2 270.4 0L0 0Z" fill="#41716b"></path><path d="M0 -135.2C24.2 -132 48.5 -128.8 67.6 -117.1C86.7 -105.4 100.7 -85.1 111.1 -64.2C121.6 -43.2 128.4 -21.6 135.2 0L0 0Z" fill="#004747"></path></g></svg>
</file>

<file path="public/site.webmanifest">
{"name":"","short_name":"","icons":[{"src":"/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/android-chrome-512x512.png","sizes":"512x512","type":"image/png"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}
</file>

<file path="scripts/test-webhook.js">
#!/usr/bin/env node

/**
 * Script de prueba para la integraci√≥n Notion-Todoist
 * Simula un webhook de Notion para probar la funcionalidad
 */

import axios from 'axios';

// Configuraci√≥n
const API_URL = process.env.APP_URL || 'http://localhost:3000';
const WEBHOOK_ENDPOINT = `${API_URL}/api/notion-webhook`;

// Datos de prueba simulando un webhook de Notion
const mockWebhookPayload = {
  object: "page",
  event_ts: new Date().toISOString(),
  event_id: "test-event-" + Date.now(),
  event_type: "page.property_updated",
  subscription_id: "test-subscription",
  user_id: "test-user",
  workspace_id: "test-workspace",
  page: {
    id: "test-page-id-" + Date.now(),
    created_time: new Date().toISOString(),
    last_edited_time: new Date().toISOString(),
    created_by: {
      object: "user",
      id: "test-user-id"
    },
    last_edited_by: {
      object: "user", 
      id: "test-user-id"
    },
    parent: {
      type: "database_id",
      database_id: "test-database-id"
    },
    archived: false,
    properties: {
      "Title": {
        type: "title",
        title: [
          {
            type: "text",
            text: {
              content: "Tarea de prueba desde Notion",
              link: null
            },
            plain_text: "Tarea de prueba desde Notion"
          }
        ]
      },
      "Status": {
        type: "select",
        select: {
          id: "test-status-id",
          name: "To Do",
          color: "red"
        }
      },
      "Priority": {
        type: "select",
        select: {
          id: "test-priority-id",
          name: "High",
          color: "red"
        }
      },
      "Due Date": {
        type: "date",
        date: {
          start: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
          end: null,
          time_zone: null
        }
      },
      "Tags": {
        type: "multi_select",
        multi_select: [
          {
            id: "test-tag-1",
            name: "importante",
            color: "red"
          },
          {
            id: "test-tag-2", 
            name: "desarrollo",
            color: "blue"
          }
        ]
      }
    },
    url: "https://www.notion.so/test-page-url",
    public_url: null
  }
};

async function testWebhook() {
  console.log('üß™ Iniciando prueba de webhook Notion-Todoist...\n');
  
  try {
    // 1. Verificar que el endpoint est√© funcionando
    console.log('1Ô∏è‚É£ Verificando estado del endpoint...');
    const healthResponse = await axios.get(WEBHOOK_ENDPOINT);
    console.log('‚úÖ Endpoint funcionando:', healthResponse.data.message);
    console.log('üìã Configuraci√≥n:', healthResponse.data.configuration);
    console.log('');

    // 2. Enviar webhook de prueba
    console.log('2Ô∏è‚É£ Enviando webhook de prueba...');
    console.log('üì§ URL:', WEBHOOK_ENDPOINT);
    console.log('üì¶ Payload:', JSON.stringify(mockWebhookPayload, null, 2));
    console.log('');

    const webhookResponse = await axios.post(WEBHOOK_ENDPOINT, mockWebhookPayload, {
      headers: {
        'Content-Type': 'application/json',
        'notion-version': '2022-06-28'
      }
    });

    console.log('3Ô∏è‚É£ Respuesta del webhook:');
    console.log('üìä Estado:', webhookResponse.status);
    console.log('üìã Respuesta:', JSON.stringify(webhookResponse.data, null, 2));

    if (webhookResponse.data.success) {
      console.log('\nüéâ ¬°Prueba exitosa!');
      if (webhookResponse.data.todoistTaskId) {
        console.log(`‚úÖ Tarea creada en Todoist: ${webhookResponse.data.todoistTaskId}`);
      }
      if (webhookResponse.data.enhancedWithAI) {
        console.log('ü§ñ Tarea enriquecida con IA');
      }
    } else {
      console.log('\n‚ùå La prueba fall√≥');
      console.log('üîç Error:', webhookResponse.data.error);
    }

  } catch (error) {
    console.error('\nüí• Error durante la prueba:');
    
    if (error.response) {
      console.error('üìä Estado HTTP:', error.response.status);
      console.error('üìã Respuesta:', error.response.data);
    } else if (error.request) {
      console.error('üåê No se pudo conectar al servidor');
      console.error('üîç Aseg√∫rate de que el servidor est√© ejecut√°ndose en:', API_URL);
    } else {
      console.error('üîç Error:', error.message);
    }
  }
}

// Funci√≥n para probar solo la creaci√≥n de tareas sin webhook
async function testDirectTaskCreation() {
  console.log('üß™ Probando creaci√≥n directa de tareas...\n');

  const testPageContent = {
    title: "Tarea de prueba directa",
    content: "Esta es una tarea creada directamente para probar la funcionalidad sin webhook de Notion.",
    url: "https://notion.so/test-page",
    priority: 3,
    dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    tags: ["prueba", "desarrollo"]
  };

  try {
    const response = await axios.post(`${API_URL}/api/notion-webhook/test-direct`, testPageContent, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ Respuesta:', response.data);
  } catch (error) {
    console.error('‚ùå Error:', error.response?.data || error.message);
  }
}

// Ejecutar pruebas
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--direct')) {
    await testDirectTaskCreation();
  } else {
    await testWebhook();
  }
}

main().catch(console.error);
</file>

<file path="src/app/api/notion-webhook/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { NotionWebhookPayload, ProcessingResult } from '@/types/notion-todoist';
import { getNotionPageContent, isUserMentioned } from '@/utils/notion-client';
import { createTodoistTask, formatDateForTodoist } from '@/utils/todoist-client';
import { enhanceTaskWithAI } from '@/utils/openai-client';

// Configuraci√≥n
const NOTION_USER_ID = process.env.NOTION_USER_ID; // Tu ID de usuario en Notion
const TODOIST_PROJECT_ID = process.env.TODOIST_PROJECT_ID; // ID del proyecto por defecto en Todoist
const ENABLE_AI_ENHANCEMENT = process.env.ENABLE_AI_ENHANCEMENT === 'true';

// Cache para prevenir duplicados
const recentlyProcessed = new Map<string, number>();
const DEBOUNCE_TIME = 30000; // 30 segundos

export async function POST(request: NextRequest): Promise<NextResponse> {
  try {
    // Parsear el payload del webhook primero
    const payload: NotionWebhookPayload = await request.json();

    // üîê MANEJO DE VERIFICACI√ìN DE NOTION
    // Seg√∫n la documentaci√≥n oficial, Notion env√≠a verification_token para verificar el endpoint
    if ('verification_token' in payload) {
      console.log('üîç Verificaci√≥n de Notion recibida:', payload.verification_token);
      
      // Guardar el token para validaci√≥n posterior (opcional pero recomendado)
      console.log('ÔøΩ Token de verificaci√≥n para validaci√≥n de firmas:', payload.verification_token);
      
      // Responder con el mismo payload para completar la verificaci√≥n
      return NextResponse.json({
        verification_token: payload.verification_token
      }, { status: 200 });
    }

    // Verificar que el webhook provenga de Notion (solo para eventos reales)
    const notionVersion = request.headers.get('notion-version');
    if (!notionVersion) {
      console.log('‚ö†Ô∏è Webhook sin header notion-version - rechazando evento real');
      return NextResponse.json(
        { error: 'Webhook no v√°lido - falta encabezado Notion' },
        { status: 400 }
      );
    }

    // TODO: Implementar validaci√≥n de firma (recomendado para producci√≥n)
    // const rawBody = await request.text();
    // if (!validateNotionWebhook(request, rawBody)) {
    //   return NextResponse.json({ error: 'Firma inv√°lida' }, { status: 401 });
    // }
    
    // Log para debugging de eventos reales
    console.log('üì• Webhook recibido:', JSON.stringify(payload, null, 2));

    // Verificar que es un evento de p√°gina (nuevo formato usa entity)
    const pageId = payload.entity?.id || payload.page?.id;
    if (!pageId || (payload.entity?.object !== 'page' && !payload.page)) {
      return NextResponse.json(
        { message: 'Evento ignorado - no es una p√°gina' },
        { status: 200 }
      );
    }

    // Verificar si ya procesamos esta p√°gina recientemente (prevenir duplicados)
    const now = Date.now();
    const lastProcessed = recentlyProcessed.get(pageId);
    
    if (lastProcessed && (now - lastProcessed) < DEBOUNCE_TIME) {
      console.log(`‚è≥ P√°gina ${pageId} procesada recientemente hace ${Math.round((now - lastProcessed) / 1000)}s, ignorando evento ${payload.type}`);
      return NextResponse.json({ message: 'Evento ignorado - procesado recientemente' });
    }

    // Limpiar cache viejo (mantener solo √∫ltimos 10 minutos)
    const entriesToDelete: string[] = [];
    recentlyProcessed.forEach((timestamp, id) => {
      if (now - timestamp > 600000) { // 10 minutos
        entriesToDelete.push(id);
      }
    });
    entriesToDelete.forEach(id => recentlyProcessed.delete(id));

    // Verificar si el usuario est√° mencionado (si se configur√≥)
    if (NOTION_USER_ID) {
      const isMentioned = await isUserMentioned(pageId, NOTION_USER_ID);
      if (!isMentioned) {
        console.log('Usuario no mencionado en la p√°gina');
        return NextResponse.json(
          { message: 'Usuario no mencionado - tarea no creada' },
          { status: 200 }
        );
      }
    }

    // Procesar la p√°gina
    const result = await processNotionPage(pageId);

    // Si el procesamiento fue exitoso, actualizar el cache
    if (result.success) {
      recentlyProcessed.set(pageId, now);
      console.log(`‚úÖ P√°gina ${pageId} procesada exitosamente y marcada en cache`);
    }

    return NextResponse.json(result, { status: result.success ? 200 : 500 });
  } catch (error) {
    console.error('Error procesando webhook:', error);
    return NextResponse.json(
      { 
        error: 'Error interno del servidor',
        details: error instanceof Error ? error.message : 'Error desconocido'
      },
      { status: 500 }
    );
  }
}

async function processNotionPage(pageId: string): Promise<ProcessingResult> {
  try {
    // 1. Obtener contenido de Notion
    console.log('Obteniendo contenido de Notion para p√°gina:', pageId);
    const pageContent = await getNotionPageContent(pageId);

    // 2. Enriquecer con IA si est√° habilitado
    let finalContent = pageContent;
    let enhancedWithAI = false;

    if (ENABLE_AI_ENHANCEMENT && process.env.OPENAI_API_KEY) {
      try {
        console.log('Enriqueciendo tarea con IA...');
        const aiEnhancement = await enhanceTaskWithAI(pageContent);
        
        finalContent = {
          ...pageContent,
          title: aiEnhancement.enhancedTitle,
          content: aiEnhancement.enhancedDescription,
          priority: aiEnhancement.suggestedPriority,
          tags: aiEnhancement.suggestedLabels,
          dueDate: aiEnhancement.suggestedDueDate || pageContent.dueDate,
        };
        
        enhancedWithAI = true;
        console.log('Tarea enriquecida con IA exitosamente');
      } catch (aiError) {
        console.error('Error al enriquecer con IA, continuando sin mejoras:', aiError);
      }
    }

    // 3. Crear tarea en Todoist
    console.log('Creando tarea en Todoist...');
    const todoistTask = {
      content: finalContent.title,
      description: `${finalContent.content}\n\nüîó Ver en Notion: ${finalContent.url}`,
      project_id: TODOIST_PROJECT_ID,
      priority: finalContent.priority || 2,
      labels: finalContent.tags || ['notion'],
      ...(finalContent.dueDate && {
        due_date: formatDateForTodoist(finalContent.dueDate),
      }),
    };

    const todoistResponse = await createTodoistTask(todoistTask);
    
    console.log('Tarea creada exitosamente en Todoist:', todoistResponse.id);

    return {
      success: true,
      todoistTaskId: todoistResponse.id,
      notionPageId: pageId,
      enhancedWithAI,
    };
  } catch (error) {
    console.error('Error procesando p√°gina de Notion:', error);
    return {
      success: false,
      notionPageId: pageId,
      error: error instanceof Error ? error.message : 'Error desconocido',
    };
  }
}

// Endpoint GET para verificar que la API est√° funcionando
export async function GET(): Promise<NextResponse> {
  return NextResponse.json({
    message: 'Notion-Todoist Webhook API funcionando',
    timestamp: new Date().toISOString(),
    endpoints: {
      webhook: 'POST /api/notion-webhook',
      health: 'GET /api/notion-webhook',
    },
    configuration: {
      notionUserIdConfigured: !!NOTION_USER_ID,
      todoistProjectIdConfigured: !!TODOIST_PROJECT_ID,
      aiEnhancementEnabled: ENABLE_AI_ENHANCEMENT,
      openaiConfigured: !!process.env.OPENAI_API_KEY,
      debounceTimeSeconds: DEBOUNCE_TIME / 1000,
      currentlyTrackedPages: recentlyProcessed.size,
    },
  });
}
</file>

<file path="src/components/common/Icon.tsx">
'use client'

import React from 'react'

export type IconType = 
  | 'github'
  | 'twitter'
  | 'linkedin'
  | 'instagram'
  | 'external-link'
  | 'folder'

interface IconProps {
  type: IconType
  width?: number
  height?: number
  className?: string
  fill?: string
}

const iconPaths = {
  github: "M12.5516 0.454773C5.92157 0.454773 0.551575 5.82477 0.551575 12.4548C0.551575 17.7648 3.98657 22.2498 8.75657 23.8398C9.35657 23.9448 9.58157 23.5848 9.58157 23.2698C9.58157 22.9848 9.56658 22.0398 9.56658 21.0348C6.55157 21.5898 5.77157 20.2998 5.53157 19.6248C5.39657 19.2798 4.81157 18.2148 4.30157 17.9298C3.88157 17.7048 3.28157 17.1498 4.28657 17.1348C5.23157 17.1198 5.90157 17.9898 6.12657 18.3498C7.31657 20.2848 9.19157 19.7148 9.62157 19.3998C9.74157 18.6198 10.0516 18.0348 10.3916 17.7348C7.69657 17.4348 4.87157 16.3948 4.87157 11.7748C4.87157 10.4548 5.39657 9.36477 6.15657 8.51477C6.02157 8.21477 5.61157 6.97477 6.29157 5.23477C6.29157 5.23477 7.40657 4.91977 9.58157 6.37477C10.6316 6.10477 11.7516 5.96977 12.8716 5.96977C13.9916 5.96977 15.1116 6.10477 16.1616 6.37477C18.3366 4.90477 19.4516 5.23477 19.4516 5.23477C20.1316 6.97477 19.7216 8.21477 19.5866 8.51477C20.3466 9.36477 20.8716 10.4398 20.8716 11.7748C20.8716 16.4098 18.0316 17.4348 15.3366 17.7348C15.7616 18.1098 16.1466 18.8298 16.1466 19.9398C16.1466 21.5448 16.1316 22.8348 16.1316 23.2698C16.1316 23.5848 16.3566 23.9598 16.9566 23.8398C21.0166 22.2348 24.4516 17.7498 24.4516 12.4548C24.4516 5.82477 19.0816 0.454773 12.5516 0.454773Z",
  
  twitter: "M22.869 2.41503C22.034 2.78503 21.137 3.03503 20.194 3.14803C21.167 2.56582 21.8949 1.64949 22.242 0.570028C21.3278 1.11302 20.3273 1.49522 19.284 1.70003C18.5824 0.950893 17.653 0.454354 16.6403 0.287502C15.6276 0.12065 14.5881 0.29282 13.6832 0.777281C12.7784 1.26174 12.0588 2.03139 11.6361 2.96673C11.2135 3.90207 11.1115 4.95078 11.346 5.95003C9.49367 5.85702 7.68121 5.39363 6.01626 4.58629C4.3513 3.77895 2.87283 2.64421 1.67 1.25003C1.269 1.92003 1.041 2.70103 1.041 3.53303C1.04062 4.2878 1.24706 5.02843 1.63717 6.67643C2.02728 7.32443 2.58768 7.85719 3.261 8.22003C2.55178 8.19503 1.86052 7.99465 1.253 7.63503V7.69203C1.25281 8.78176 1.63165 9.83647 2.32421 10.6821C3.01676 11.5278 3.97731 12.1066 5.047 12.316C4.39994 12.5002 3.71878 12.5313 3.058 12.407C3.37091 13.3426 3.97538 14.1564 4.78823 14.7291C5.60108 15.3018 6.57993 15.6035 7.587 15.591C5.85885 16.9491 3.70726 17.6992 1.486 17.725C1.13034 17.7277 0.775114 17.7059 0.423 17.66C2.69549 19.0969 5.36504 19.8721 8.094 19.888C16.1 19.888 20.511 12.561 20.511 6.26803C20.511 6.08403 20.507 5.89803 20.499 5.71403C21.3958 5.05779 22.1678 4.25133 22.777 3.33403L22.869 2.41503Z",
  
  linkedin: "M2.7206e-07 1.838C2.7206e-07 1.35053 0.193646 0.883032 0.538338 0.53834C0.88303 0.193648 1.35053 2.45031e-06 1.838 2.45031e-06H20.16C20.4016 -0.000392101 20.6409 0.0468654 20.8641 0.139069C21.0874 0.231273 21.2903 0.366612 21.4612 0.537339C21.6322 0.708065 21.7677 0.910826 21.8602 1.13401C21.9526 1.3572 22.0001 1.59643 22 1.838V20.16C22.0003 20.4016 21.9529 20.6431 21.8607 20.8664C21.7686 21.0898 21.6334 21.2928 21.4627 21.464C21.2921 21.6352 21.0893 21.7708 20.866 21.8635C20.6427 21.9562 20.4013 22.0042 20.159 22.006H1.838C1.35053 22.006 0.883032 21.8124 0.53834 21.4677C0.193648 21.123 2.45031e-06 20.6555 2.45031e-06 20.168L2.7206e-07 1.838ZM8.708 8.388V18.56H12.687V13.424C12.687 11.837 12.994 10.31 15.04 10.31C17.056 10.31 17.082 12.154 17.082 13.528V18.56H21.061V12.766C21.061 9.394 20.351 6.754 16.408 6.754C14.504 6.754 13.252 7.825 12.738 8.84H12.687V8.388H8.708ZM3.938 8.388H7.917V18.56H3.938V8.388ZM5.928 2.44C5.53477 2.44 5.15677 2.59633 4.87433 2.87877C4.59189 3.16121 4.43556 3.53921 4.43556 3.932C4.43556 4.32479 4.59189 4.70279 4.87433 4.98523C5.15677 5.26767 5.53477 5.424 5.928 5.424C6.32079 5.424 6.69879 5.26767 6.98123 4.98523C7.26367 4.70279 7.42 4.32479 7.42 3.932C7.42 3.53921 7.26367 3.16121 6.98123 2.87877C6.69879 2.59633 6.32079 2.44 5.928 2.44Z",
  
  instagram: "M6.465 0.066C7.638 0.012 8.012 0 11 0C13.988 0 14.362 0.013 15.534 0.066C16.706 0.119 17.506 0.306 18.206 0.577C18.939 0.854 19.604 1.287 20.154 1.847C20.714 2.396 21.146 3.06 21.422 3.794C21.694 4.494 21.88 5.294 21.934 6.464C21.988 7.639 22 8.013 22 11C22 13.988 21.987 14.362 21.934 15.535C21.881 16.705 21.694 17.505 21.422 18.205C21.146 18.9391 20.7133 19.6042 20.154 20.154C19.604 20.713 18.939 21.145 18.206 21.422C17.506 21.694 16.706 21.88 15.535 21.934C14.361 21.988 13.987 22 11 22C8.012 22 7.638 21.987 6.465 21.934C5.295 21.881 4.495 21.694 3.795 21.422C3.06092 21.146 2.39582 20.7133 1.847 20.154C1.28792 19.6042 0.854278 18.9391 0.577 18.205C0.306 17.505 0.119 16.705 0.066 15.535C0.012 14.361 0 13.987 0 11C0 8.012 0.013 7.638 0.066 6.465C0.119 5.294 0.306 4.494 0.577 3.794C0.854278 3.06092 1.28792 2.39582 1.847 1.847C2.39582 1.28792 3.06092 0.854278 3.794 0.577C4.494 0.306 5.294 0.119 6.464 0.066H6.465ZM15.445 2.046C14.285 1.993 13.937 1.982 11 1.982C8.063 1.982 7.715 1.993 6.555 2.046C5.482 2.095 4.9 2.274 4.512 2.425C3.999 2.625 3.632 2.862 3.247 3.247C2.88205 3.61077 2.59776 4.05277 2.425 4.543C2.274 4.9 2.095 5.482 2.046 6.555C1.993 7.715 1.982 8.063 1.982 11C1.982 13.937 1.993 14.285 2.046 15.445C2.095 16.518 2.274 17.1 2.425 17.488C2.598 17.9723 2.88205 18.4143 3.247 18.778C3.61077 19.143 4.05277 19.427 4.543 19.6C4.9 19.751 5.482 19.93 6.555 19.979C7.715 20.032 8.062 20.043 11 20.043C13.938 20.043 14.285 20.032 15.445 19.979C16.518 19.93 17.1 19.751 17.488 19.6C18.001 19.4 18.368 19.163 18.753 18.778C19.118 18.4143 19.402 17.9723 19.575 17.488C19.726 17.1 19.905 16.518 19.954 15.445C20.007 14.285 20.018 13.937 20.018 11C20.018 8.063 20.007 7.715 19.954 6.555C19.905 5.482 19.726 4.9 19.575 4.512C19.375 3.999 19.138 3.632 18.753 3.247C18.3893 2.88205 17.9473 2.59776 17.457 2.425C17.1 2.274 16.518 2.095 15.445 2.046ZM9.595 14.391C10.3797 14.7176 11.2534 14.7617 12.0669 14.5157C12.8805 14.2697 13.5834 13.7489 14.0556 13.0422C14.5278 12.3356 14.7401 11.4869 14.656 10.6411C14.572 9.79534 14.1971 9.00497 13.595 8.405C13.2112 8.02148 12.7472 7.72781 12.2363 7.54515C11.7255 7.36248 11.1804 7.29536 10.6405 7.34862C10.1006 7.40187 9.58034 7.57418 9.1138 7.85313C8.64727 8.13208 8.24617 8.51074 7.94049 8.96185C7.63482 9.41296 7.43251 9.92529 7.34757 10.4634C7.26263 11.0016 7.29687 11.5515 7.44813 12.0748C7.59939 12.5981 7.86404 13.0819 8.22225 13.4919C8.58045 13.9019 9.02347 14.2274 9.52 14.445L9.595 14.391ZM7.002 7.002C7.52702 6.47698 8.15032 6.0605 8.8363 5.78405C9.52229 5.50761 10.2575 5.36652 11 5.36652C11.7425 5.36652 12.4777 5.50761 13.1637 5.78405C13.8497 6.0605 14.473 6.47698 14.998 7.002C15.523 7.52702 15.9395 8.15032 16.2159 8.8363C16.4924 9.52229 16.6335 10.2575 16.6335 11C16.6335 11.7425 16.4924 12.4777 16.2159 13.1637C15.9395 13.8497 15.523 14.473 14.998 14.998C13.9368 16.0592 12.4982 16.6335 11 16.6335C9.50176 16.6335 8.06324 16.0592 7.002 14.998C5.94076 13.9368 5.36652 12.4982 5.36652 11C5.36652 9.50176 5.94076 8.06324 7.002 7.002ZM17.908 6.188C18.0381 6.06527 18.1423 5.91768 18.2143 5.75397C18.2863 5.59027 18.3248 5.41377 18.3274 5.23493C18.33 5.05609 18.2967 4.87855 18.2295 4.71281C18.1622 4.54707 18.0624 4.39651 17.936 4.27004C17.8095 4.14357 17.6589 4.04376 17.4932 3.97652C17.3275 3.90928 17.1499 3.87598 16.9711 3.87598C16.7922 3.87598 16.6147 3.90928 16.4489 3.97652C16.2832 4.04376 16.1326 4.14357 16.0062 4.27004C15.7589 4.51724 15.6117 4.85082 15.6117 5.19993C15.6117 5.54904 15.7589 5.88262 16.0062 6.12982C16.2534 6.37703 16.587 6.52420 16.9361 6.52420C17.2852 6.52420 17.6188 6.37703 17.866 6.12982L17.908 6.188Z",
  
  'external-link': "M18 13V19C18 19.5304 17.7893 20.0391 17.4142 20.4142C17.0391 20.7893 16.5304 21 16 21H5C4.46957 21 3.96086 20.7893 3.58579 20.4142C3.21071 20.0391 3 19.5304 3 19V8C3 7.46957 3.21071 6.96086 3.58579 6.58579C3.96086 6.21071 4.46957 6 5 6H11M15 3H21V9M10 14L21 3",
  
  folder: "M10 4H4C2.89543 4 2 4.89543 2 6V18C2 19.1046 2.89543 20 4 20H20C21.1046 20 22 19.1046 22 18V8C22 6.89543 21.1046 6 20 6H12L10 4Z"
}

const iconViewBoxes = {
  github: "0 0 25 24",
  twitter: "0 0 23 19", 
  linkedin: "0 0 22 22",
  instagram: "0 0 22 22",
  'external-link': "0 0 24 24",
  folder: "0 0 24 24"
}

const Icon: React.FC<IconProps> = ({ 
  type, 
  width = 24, 
  height = 24, 
  className = "", 
  fill = "currentColor" 
}) => {
  return (
    <svg
      width={width}
      height={height}
      viewBox={iconViewBoxes[type]}
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={className}
    >
      <path
        d={iconPaths[type]}
        fill={fill}
        stroke={type === 'external-link' ? "currentColor" : undefined}
        strokeWidth={type === 'external-link' ? "2" : undefined}
        strokeLinecap={type === 'external-link' ? "round" : undefined}
        strokeLinejoin={type === 'external-link' ? "round" : undefined}
      />
    </svg>
  )
}

export default Icon
</file>

<file path="src/components/Contact.tsx">
'use client'

import { motion, useAnimation } from 'framer-motion'
import React, { useEffect } from 'react'
import { useInView } from 'react-intersection-observer'
import '@/styles/contact.scss'
import { ContainerVariants } from '@/utils/animation'
import strings from '@/data/contact.json'

const Contact: React.FC = () => {
  const [ref, inView] = useInView()
  const animation = useAnimation()

  useEffect(() => {
    if (inView) {
      animation.start('visible')
    } else {
      animation.start('hidden')
    }
  }, [inView, animation])

  return (
    <motion.section
      className="contact"
      ref={ref}
      variants={ContainerVariants}
      initial="hidden"
      animate={animation}
    >
      <h1 className="title" id="contact">
        {strings.contactTitle}
      </h1>
      <p>
        {strings.contactText}
      </p>
      <a href={`mailto:${strings.socials.mail}`}>
        <button>{strings.contactButton}</button>
      </a>
    </motion.section>
  )
}

export default Contact
</file>

<file path="src/components/FloatMail.tsx">
'use client'

import React from 'react'
import '@/styles/floatmail.scss'
import strings from '@/data/contact.json'

const FloatMail: React.FC = () => {
  return (
    <div className="floating-mail">
      <div className="floating-line"></div>
      <a className="mail" href={`mailto:${strings.socials.mail}`}>
        {strings.socials.mail}
      </a>
    </div>
  )
}

export default FloatMail
</file>

<file path="src/data/aboutme.json">
{
  "hero": {
    "greeting": "üëã Hi there! My name is",
    "name": "Sebastian Ruiz",
    "description": "I <del>break</del> build things for the web",
    "buttonText": "See my projects"
  },
  "aboutMeTitle": "About Me",
  "aboutMeText1": "I'm Sebastian Ruiz. A web developer, an eternal learner, a creative. <strong>I have internet and technology in my veins.</strong>",
  "aboutMeText2": "My work focuses on building Web Applications (And everything in between) using State of the Art web technologies such as <strong>React, NextJS, Javascript, Typescript, Webpack, etc.</strong> My self-taught spirit drives me to never stop learning.",
  "aboutMeText3": "I also have a big passion for being a person who <strong>shares knowledge</strong> and <strong>teaches people</strong> about whatever I learn, that's why I also work as a <strong>Mentor with the local communities</strong> to engage new people into the ecosystems and encourage them to build amazing things.",
  "aboutMeText4": "As a complement to my skills on the Web, I have learned about <strong>blockchain technologies</strong> such as <strong>Web3JS, HardHat, and Solidity Programming</strong> to deliver highly efficient Decentralized Apps and Smart contracts.",
  "aboutMeText5": "Earlier in my life I learned about <a href=\"https://www.behance.net/imsebarz\" target=\"_blank\">Design</a>, photography and Filmmaking. Skills that have been very helpful in my career. The guiding principle of everything I do is: <strong>I learn and then teach, and teaching is the way I learn.</strong>",
  "someTechnologiesTitle": "Some technologies I've used",
  "technologies": [
    "Javascript",
    "Typescript",
    "ReactJS",
    "NextJS",
    "CSS",
    "Sass",
    "Styled components",
    "HTML",
    "NodeJS",
    "MongoDB",
    "CI/CD",
    "Git/Github",
    "Github Actions",
    "Webpack",
    "Parcel",
    "Solidity",
    "Hardhat",
    "Unit Testing",
    "Microfrontends"
  ]
}
</file>

<file path="src/data/contact.json">
{
  "contactTitle": "Get in touch",
  "contactText": "I am willing to work with you or with your company, wherever you are from, in any challenge that involves web development, systems engineering or any creative process",
  "contactButton": "Say hello",
  "socials": {
    "behance": "https://www.behance.net/imsebarz",
    "github": "https://github.com/imsebarz",
    "linkedin": "https://www.linkedin.com/in/imsebarz/",
    "twitter": "https://twitter.com/imsebarz",
    "instagram": "https://www.instagram.com/imsebarz/",
    "mail": "imsebarz@gmail.com",
    "username": "@imsebarz"
  }
}
</file>

<file path="src/data/nav.json">
{
  "name": "Sebarz",
  "links": {
    "aboutMe": "About me",
    "featuredProjects": "Featured",
    "projects": "Projects",
    "contact": "Contact",
    "resume": "Resume"
  },
  "resumeLink": ""
}
</file>

<file path="src/data/projects.json">
{
  "projects": [
    {
      "id": 0,
      "name": "üéÆ Manikins Arena",
      "description": "ReactJS Interactive landing page for an online videogame. page made for Life is The Game S.A.S",
      "tags": ["ReactJS", "Javascript", "Sass", "React Router", "Web3JS"],
      "img": "manikins.webp",
      "githubRepo": "https://github.com/imsebarz/manikins",
      "demo": "https://manikins.io",
      "featured": true
    },
    {
      "id": 1,
      "name": "üõí Petit Store",
      "description": "A full responsive e-commerce for small business,  made on ReactJS, Using React Router, Sass, and the React Context API ",
      "tags": ["ReactJS", "Javascript", "Sass", "React Router", "Responsive"],
      "img": "petit.webp",
      "githubRepo": "https://github.com/imsebarz/petit-website",
      "demo": "https://petit-website.web.app/",
      "featured": true
    },

    {
      "id": 2,
      "name": "üì∑ Photolalaphy Portfolio",
      "description": "A responsive creative photography portfolio built on Javascript Using GSAP for animations and transitions",
      "tags": ["Javascript", "Sass", "GSAP", "Responsive"],
      "img": "lala.webp",
      "githubRepo": "https://github.com/imsebarz/lalaphoto",
      "demo": "https://imsebarz.github.io/lalaphoto/",
      "featured": true
    },
    {
      "id": 3,
      "name": "üî† Lexical analyzer",
      "description": "A lexical analyzer for a programming language based on the Javascript Sintax. Is a Fullstack application with backend on Python and Javascript Frontend.",
      "tags": ["Fullstack", "Javascript", "API", "ReactJS", "Python"],
      "img": "",
      "githubRepo": "https://github.com/imsebarz/analizador-lexico",
      "demo": "https://analizador-lexico.netlify.app/",
      "featured": false
    },

    {
      "id": 4,
      "name": "üé¨ MediaPlayer",
      "description": "An extensible media player. Implemented Plugins for Autoplay, AutoPause and Ads. Built using Typescript, OOP and Software Design patterns.",
      "tags": ["Typescript", "Javascript", "OOP", "Plugins"],
      "img": "",
      "githubRepo": "https://github.com/imsebarz/mediaplayer",
      "demo": "https://imsebarz.github.io/lalaphoto/",
      "featured": false
    },
    {
      "id": 5,
      "name": "ü§ñ FRIDAY Clone",
      "description": "Iron Man's Friday Clone, Web Application Build on Vanilla Javascript Using Web Speech Recognition and Speech To Text API's",
      "tags": [
        "Javascript",
        "Speech to text",
        "Speech Recognition",
        "svg animation"
      ],
      "img": "",
      "githubRepo": "https://github.com/imsebarz/FRIDAY",
      "demo": "https://imsebarz.github.io/FRIDAY/",
      "featured": false
    },
    {
      "id": 6,
      "name": "üë© Personal Cards",
      "description": "Website that fetchs random user data and shows a nice presentation card about each user. This website was built using Webpack for improve performance and optimization.",
      "tags": ["Javascript", "Webpack", "Sass", "HTML"],
      "img": "",
      "githubRepo": "https://github.com/imsebarz/webpack-project",
      "demo": "",
      "featured": false
    },
    {
      "id": 7,
      "name": "üí∞ Batatabit Landing page",
      "description": "Mobile-First landing page for a criptocurrency company. Page built using only HTML and CSS. ",
      "tags": ["HTML", "CSS", "Mobile-First", "Responsive"],
      "img": "",
      "githubRepo": "https://github.com/imsebarz/mobile-first",
      "demo": "https://imsebarz.github.io/mobile-first/",
      "featured": false
    },
    {
      "id": 8,
      "name": "üì∫ PlatziVideo",
      "description": "Video streaming platform Homepage. The site is build on ReactJS and bundled using Parcel ",
      "tags": ["Javascript", "Sass", "ReactJS", "Parcel", "API"],
      "img": "",
      "githubRepo": "https://github.com/imsebarz/platzivideo",
      "demo": "",
      "featured": false
    }
  ]
}
</file>

<file path="src/styles/colors.scss">
$mint: #eefff3;
$green: #004747;
$pepper: #403d39ff;
$black: #252422ff;
$orange: #eb5e28ff;
</file>

<file path="src/styles/featuredprojects.scss">
.featuredProjects {
  display: flex;
  margin: 0 5em;
  flex-direction: column;
  place-items: center;
  gap: 5em;
}

.featuredProjects-container {
  display: flex;
  flex-direction: column;
  gap: 3em;
}

@media screen and (max-width: 905px) {
  .featuredProjects {
    margin: 0;
  }
}
</file>

<file path="src/types/assets.d.ts">
declare module '*.svg' {
  const content: string
  export default content
}

declare module '*.png' {
  const content: string
  export default content
}

declare module '*.jpg' {
  const content: string
  export default content
}

declare module '*.jpeg' {
  const content: string
  export default content
}

declare module '*.webp' {
  const content: string
  export default content
}

declare module '*.gif' {
  const content: string
  export default content
}

declare module '*.ico' {
  const content: string
  export default content
}

declare module '*.otf' {
  const content: string
  export default content
}

declare module '*.ttf' {
  const content: string
  export default content
}

declare module '*.woff' {
  const content: string
  export default content
}

declare module '*.woff2' {
  const content: string
  export default content
}
</file>

<file path="src/types/notion-todoist.ts">
// Interfaces para la integraci√≥n Notion-Todoist basadas en la documentaci√≥n oficial

export interface NotionWebhookPayload {
  // Campos de verificaci√≥n
  verification_token?: string;  // Para verificaci√≥n inicial del endpoint
  
  // Campos de eventos reales (formato actual de la documentaci√≥n)
  id?: string;                  // ID √∫nico del evento
  timestamp?: string;           // Timestamp del evento
  workspace_id?: string;        // ID del workspace
  workspace_name?: string;      // Nombre del workspace
  subscription_id?: string;     // ID de la suscripci√≥n
  integration_id?: string;      // ID de la integraci√≥n
  type?: string;               // Tipo de evento (page.created, page.content_updated, etc.)
  attempt_number?: number;      // N√∫mero de intento de entrega
  
  // Autores del cambio
  authors?: Array<{
    id: string;
    type: string;
  }>;
  
  // Entidad afectada (p√°gina, base de datos, etc.)
  entity?: {
    id: string;
    type: string;  // "page", "database", "comment", etc.
  };
  
  // Datos adicionales del evento
  data?: {
    parent?: {
      id: string;
      type: string;
    };
    updated_blocks?: Array<{
      id: string;
      type: string;
    }>;
  };
  
  // Campos legacy para retrocompatibilidad
  object?: string;              
  event_ts?: string;            
  event_id?: string;            
  event_type?: string;          
  user_id?: string;            
  
  // Para retrocompatibilidad con formatos anteriores
  page?: {
    id: string;
    created_time: string;
    last_edited_time: string;
    created_by: {
      object: string;
      id: string;
    };
    last_edited_by: {
      object: string;
      id: string;
    };
    cover?: unknown;
    icon?: unknown;
    parent: {
      type: string;
      database_id?: string;
      page_id?: string;
    };
    archived: boolean;
    properties: {
      [key: string]: unknown;
    };
    url: string;
    public_url?: string;
  };
  
  properties?: {
    [key: string]: unknown;
  };
}

export interface TodoistTask {
  content: string;
  description?: string;
  project_id?: string;
  section_id?: string;
  parent_id?: string;
  order?: number;
  labels?: string[];
  priority?: number;
  due_string?: string;
  due_date?: string;
  due_datetime?: string;
  due_lang?: string;
  assignee_id?: string;
}

export interface TodoistCreateTaskResponse {
  id: string;
  assigner_id?: string;
  assignee_id?: string;
  project_id: string;
  section_id?: string;
  parent_id?: string;
  order: number;
  content: string;
  description: string;
  is_completed: boolean;
  labels: string[];
  priority: number;
  comment_count: number;
  is_shared: boolean;
  created_at: string;
  due?: {
    date: string;
    is_recurring: boolean;
    datetime?: string;
    string: string;
    timezone?: string;
  };
  url: string;
}

export interface NotionPageContent {
  title: string;
  content: string;
  url: string;
  priority?: number;
  dueDate?: string;
  assignee?: string;
  tags?: string[];
}

export interface OpenAIEnhancement {
  enhancedTitle: string;
  enhancedDescription: string;
  suggestedPriority: number;
  suggestedLabels: string[];
  suggestedDueDate?: string;
}

export interface ProcessingResult {
  success: boolean;
  todoistTaskId?: string;
  notionPageId?: string;
  enhancedWithAI?: boolean;
  error?: string;
}
</file>

<file path="src/utils/notion-client.ts">
import { Client } from '@notionhq/client';
import { NotionPageContent } from '@/types/notion-todoist';

// Interfaces para tipos de Notion
interface NotionRichText {
  type: string;
  mention?: {
    type: string;
    user: {
      id: string;
    };
  };
}

interface NotionPeopleProperty {
  type: 'people';
  people: Array<{ id: string; type: string }>;
}

interface NotionRichTextProperty {
  type: 'rich_text';
  rich_text: NotionRichText[];
}

interface NotionTitleProperty {
  type: 'title';
  title: NotionRichText[];
}

const notion = new Client({
  auth: process.env.NOTION_TOKEN,
});

export async function getNotionPageContent(pageId: string): Promise<NotionPageContent> {
  try {
    // Obtener informaci√≥n de la p√°gina
    const page = await notion.pages.retrieve({ page_id: pageId });
    
    // Obtener el contenido de la p√°gina
    const blocks = await notion.blocks.children.list({
      block_id: pageId,
    });

    // Extraer t√≠tulo y contenido
    let title = 'Nueva tarea desde Notion';
    let content = '';
    let priority = 1;
    let dueDate: string | undefined;
    let assignee: string | undefined;
    let tags: string[] = [];

    // Procesar propiedades de la p√°gina
    if ('properties' in page && page.properties) {
      // Extraer t√≠tulo (puede estar en diferentes propiedades dependiendo de la configuraci√≥n)
      const titleProperty = Object.values(page.properties).find(
        (prop) => prop.type === 'title'
      );
      
      if (titleProperty && titleProperty.type === 'title' && titleProperty.title[0]) {
        title = titleProperty.title[0].plain_text;
      }

      // Extraer otras propiedades relevantes
      Object.entries(page.properties).forEach(([key, property]) => {
        if (property.type === 'select' && property.select?.name) {
          if (key.toLowerCase().includes('priority') || key.toLowerCase().includes('prioridad')) {
            const priorityValue = property.select.name.toLowerCase();
            if (priorityValue.includes('high') || priorityValue.includes('alta')) priority = 4;
            else if (priorityValue.includes('medium') || priorityValue.includes('media')) priority = 3;
            else if (priorityValue.includes('low') || priorityValue.includes('baja')) priority = 2;
          }
        }

        if (property.type === 'date' && property.date?.start) {
          dueDate = property.date.start;
        }

        if (property.type === 'people' && property.people.length > 0) {
          const user = property.people[0];
          if ('name' in user && user.name) {
            assignee = user.name;
          } else {
            assignee = user.id;
          }
        }

        if (property.type === 'multi_select' && property.multi_select.length > 0) {
          tags = property.multi_select.map(tag => tag.name);
        }
      });
    }

    // Procesar contenido de bloques
    if (blocks.results.length > 0) {
      content = blocks.results
        .map((block) => {
          if ('type' in block) {
            switch (block.type) {
              case 'paragraph':
                return block.paragraph.rich_text
                  .map((text) => text.plain_text)
                  .join('');
              case 'heading_1':
                return `# ${block.heading_1.rich_text
                  .map((text) => text.plain_text)
                  .join('')}`;
              case 'heading_2':
                return `## ${block.heading_2.rich_text
                  .map((text) => text.plain_text)
                  .join('')}`;
              case 'heading_3':
                return `### ${block.heading_3.rich_text
                  .map((text) => text.plain_text)
                  .join('')}`;
              case 'bulleted_list_item':
                return `‚Ä¢ ${block.bulleted_list_item.rich_text
                  .map((text) => text.plain_text)
                  .join('')}`;
              case 'numbered_list_item':
                return `1. ${block.numbered_list_item.rich_text
                  .map((text) => text.plain_text)
                  .join('')}`;
              case 'to_do':
                const checked = block.to_do.checked ? '‚úÖ' : '‚òê';
                return `${checked} ${block.to_do.rich_text
                  .map((text) => text.plain_text)
                  .join('')}`;
              default:
                return '';
            }
          }
          return '';
        })
        .filter(text => text.length > 0)
        .join('\n');
    }

    return {
      title,
      content: content || 'Contenido extra√≠do desde Notion',
      url: 'url' in page ? page.url : `https://notion.so/${pageId}`,
      priority,
      dueDate,
      assignee,
      tags,
    };
  } catch (error) {
    console.error('Error al obtener contenido de Notion:', error);
    throw new Error('No se pudo obtener el contenido de la p√°gina de Notion');
  }
}

export async function isUserMentioned(pageId: string, userId: string): Promise<boolean> {
  try {
    // 1. Verificar menciones en las propiedades de la p√°gina
    const page = await notion.pages.retrieve({ page_id: pageId });
    
    if ('properties' in page && page.properties) {
      // Buscar menciones en las propiedades de la p√°gina
      const hasMentionInProperties = Object.values(page.properties).some((property) => {
        // Verificar propiedades de tipo "people"
        if (property.type === 'people' && property.people.length > 0) {
          return property.people.some(person => person.id === userId);
        }
        
        // Verificar propiedades de texto rico que pueden contener menciones
        if (property.type === 'rich_text' && property.rich_text.length > 0) {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return property.rich_text.some((text: any) => {
            if (text.type === 'mention' && text.mention?.type === 'user' && text.mention?.user?.id) {
              return text.mention.user.id === userId;
            }
            return false;
          });
        }
        
        // Verificar propiedades de t√≠tulo que pueden contener menciones
        if (property.type === 'title' && property.title.length > 0) {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          return property.title.some((text: any) => {
            if (text.type === 'mention' && text.mention?.type === 'user' && text.mention?.user?.id) {
              return text.mention.user.id === userId;
            }
            return false;
          });
        }
        
        return false;
      });
      
      if (hasMentionInProperties) {
        console.log('‚úÖ Usuario mencionado en propiedades de la p√°gina');
        return true;
      }
    }

    // 2. Verificar menciones en el contenido de bloques (m√©todo original)
    const blocks = await notion.blocks.children.list({
      block_id: pageId,
    });

    const hasMentionInContent = blocks.results.some((block) => {
      if ('type' in block) {
        const checkRichText = (richTextArray: unknown[]) => {
          return richTextArray.some((text: unknown) => {
            if (typeof text === 'object' && text !== null && 'type' in text && 'mention' in text) {
              const textObj = text as { type: string; mention: { type: string; user: { id: string } } };
              if (textObj.type === 'mention' && textObj.mention.type === 'user') {
                return textObj.mention.user.id === userId;
              }
            }
            return false;
          });
        };

        switch (block.type) {
          case 'paragraph':
            return checkRichText(block.paragraph.rich_text);
          case 'heading_1':
            return checkRichText(block.heading_1.rich_text);
          case 'heading_2':
            return checkRichText(block.heading_2.rich_text);
          case 'heading_3':
            return checkRichText(block.heading_3.rich_text);
          case 'bulleted_list_item':
            return checkRichText(block.bulleted_list_item.rich_text);
          case 'numbered_list_item':
            return checkRichText(block.numbered_list_item.rich_text);
          case 'to_do':
            return checkRichText(block.to_do.rich_text);
          default:
            return false;
        }
      }
      return false;
    });

    if (hasMentionInContent) {
      console.log('‚úÖ Usuario mencionado en contenido de la p√°gina');
      return true;
    }

    console.log('‚ùå Usuario no encontrado en menciones');
    return false;
  } catch (error) {
    console.error('Error al verificar menciones:', error);
    return false;
  }
}
</file>

<file path="src/utils/openai-client.ts">
import OpenAI from 'openai';
import { NotionPageContent, OpenAIEnhancement } from '@/types/notion-todoist';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function enhanceTaskWithAI(pageContent: NotionPageContent): Promise<OpenAIEnhancement> {
  const userPrompt = `
Analiza el siguiente contenido de una p√°gina de Notion y mejora la informaci√≥n para crear una tarea en Todoist:

T√≠tulo: ${pageContent.title}
Contenido: ${pageContent.content}
URL: ${pageContent.url}
Prioridad actual: ${pageContent.priority}
Fecha de vencimiento: ${pageContent.dueDate || 'No especificada'}
Asignado: ${pageContent.assignee || 'No especificado'}
Etiquetas: ${pageContent.tags?.join(', ') || 'Ninguna'}

Por favor, proporciona:
1. Un t√≠tulo mejorado y m√°s claro para la tarea
2. Una descripci√≥n enriquecida que incluya el contexto y los pasos de acci√≥n
3. Una prioridad sugerida (1-4, donde 4 es la m√°s alta)
4. Etiquetas sugeridas relevantes (SOLO usa: nombre del proyecto, nombre de la tabla/base de datos, o etiquetas existentes en la respuesta original de Notion)
5. Una fecha de vencimiento sugerida si no hay una (formato YYYY-MM-DD)

IMPORTANTE: 
- No inventes subtareas ni dividas la tarea principal. Mant√©n la tarea como una sola unidad de trabajo basada √∫nicamente en el contenido proporcionado.
- Para las etiquetas, √öNICAMENTE usa informaci√≥n que ya existe en los datos de Notion proporcionados. No inventes etiquetas nuevas.

Responde en formato JSON con la siguiente estructura:
{
  "enhancedTitle": "t√≠tulo mejorado",
  "enhancedDescription": "descripci√≥n detallada con contexto y pasos de acci√≥n",
  "suggestedPriority": n√∫mero_entre_1_y_4,
  "suggestedLabels": ["etiqueta1", "etiqueta2"],
  "suggestedDueDate": "YYYY-MM-DD o null si no es necesaria"
}
`;

  try {
    const response = await openai.responses.create({
      model: 'gpt-4.1-mini',
      instructions: 'Eres un asistente experto en productividad que ayuda a optimizar tareas y proyectos. Responde √∫nicamente con JSON v√°lido.',
      input: userPrompt,
      text: {
        format: { type: 'json_object' }
      },
      max_output_tokens: 500,
    });

    const content = response.output_text;
    if (!content) {
      throw new Error('No se recibi√≥ respuesta de OpenAI');
    }

    return parseOpenAIResponse(content, pageContent);
  } catch (error: unknown) {
    console.error('Error al enriquecer con IA:', error);
    
    // Mostrar mensaje espec√≠fico seg√∫n el tipo de error
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const errorObj = error as any;
    if (errorObj?.status === 429) {
      console.log('‚ö†Ô∏è  Cuota de OpenAI excedida - usando contenido original');
    } else if (errorObj?.status === 401) {
      console.log('‚ö†Ô∏è  Token de OpenAI inv√°lido - usando contenido original');
    } else {
      console.log('‚ö†Ô∏è  Error de OpenAI - usando contenido original');
    }
    
    // Fallback si falla OpenAI
    return {
      enhancedTitle: pageContent.title,
      enhancedDescription: `${pageContent.content}\n\nüîó Ver en Notion: ${pageContent.url}`,
      suggestedPriority: pageContent.priority || 2,
      suggestedLabels: pageContent.tags && pageContent.tags.length > 0 ? pageContent.tags : ['notion'],
      suggestedDueDate: pageContent.dueDate,
    };
  }
}

function parseOpenAIResponse(content: string, pageContent: NotionPageContent): OpenAIEnhancement {
  try {
    const parsed = JSON.parse(content);
    return {
      enhancedTitle: parsed.enhancedTitle || pageContent.title,
      enhancedDescription: parsed.enhancedDescription || pageContent.content,
      suggestedPriority: Math.min(Math.max(parsed.suggestedPriority || pageContent.priority || 1, 1), 4),
      suggestedLabels: Array.isArray(parsed.suggestedLabels) ? parsed.suggestedLabels : pageContent.tags || [],
      suggestedDueDate: parsed.suggestedDueDate === 'null' ? undefined : parsed.suggestedDueDate,
    };
  } catch (parseError) {
    console.error('Error al parsear respuesta de OpenAI:', parseError);
    // Fallback con los datos originales
    return {
      enhancedTitle: pageContent.title,
      enhancedDescription: `${pageContent.content}\n\nüîó Ver en Notion: ${pageContent.url}`,
      suggestedPriority: pageContent.priority || 2,
      suggestedLabels: pageContent.tags && pageContent.tags.length > 0 ? pageContent.tags : ['notion'],
      suggestedDueDate: pageContent.dueDate,
    };
  }
}
</file>

<file path="src/utils/todoist-client.ts">
import axios from 'axios';
import { TodoistTask, TodoistCreateTaskResponse } from '@/types/notion-todoist';

const TODOIST_API_URL = 'https://api.todoist.com/rest/v2';

export async function createTodoistTask(task: TodoistTask): Promise<TodoistCreateTaskResponse> {
  try {
    const response = await axios.post<TodoistCreateTaskResponse>(
      `${TODOIST_API_URL}/tasks`,
      task,
      {
        headers: {
          'Authorization': `Bearer ${process.env.TODOIST_API_TOKEN}`,
          'Content-Type': 'application/json',
        },
      }
    );

    return response.data;
  } catch (error) {
    console.error('Error al crear tarea en Todoist:', error);
    if (axios.isAxiosError(error)) {
      throw new Error(`Error de Todoist: ${error.response?.status} - ${error.response?.data}`);
    }
    throw new Error('Error desconocido al crear tarea en Todoist');
  }
}

export async function getProjects(): Promise<Array<{ id: string; name: string }>> {
  try {
    const response = await axios.get(`${TODOIST_API_URL}/projects`, {
      headers: {
        'Authorization': `Bearer ${process.env.TODOIST_API_TOKEN}`,
      },
    });

    return response.data.map((project: { id: string; name: string }) => ({
      id: project.id,
      name: project.name,
    }));
  } catch (error) {
    console.error('Error al obtener proyectos de Todoist:', error);
    return [];
  }
}

export function formatDateForTodoist(date: string): string {
  // Convierte fecha ISO a formato que entiende Todoist
  const dateObj = new Date(date);
  return dateObj.toISOString().split('T')[0]; // YYYY-MM-DD
}
</file>

<file path="src/utils/webhook-validation.ts">
import { createHmac, timingSafeEqual } from 'crypto';

/**
 * Valida la firma de un webhook de Notion usando HMAC-SHA256
 * @param payload - El cuerpo del webhook como string
 * @param signature - La firma del header X-Notion-Signature
 * @param verificationToken - El token de verificaci√≥n recibido inicialmente
 * @returns boolean - true si la firma es v√°lida
 */
export function validateNotionSignature(
  payload: string,
  signature: string,
  verificationToken: string
): boolean {
  try {
    // Calcular la firma esperada
    const calculatedSignature = `sha256=${createHmac('sha256', verificationToken)
      .update(payload)
      .digest('hex')}`;

    // Comparar de forma segura para evitar ataques de timing
    return timingSafeEqual(
      Buffer.from(calculatedSignature),
      Buffer.from(signature)
    );
  } catch (error) {
    console.error('Error validando firma de Notion:', error);
    return false;
  }
}

/**
 * Middleware para validar webhooks de Notion
 * @param request - Request de Next.js
 * @param rawBody - Cuerpo crudo del request
 * @returns boolean - true si es v√°lido o si la validaci√≥n est√° deshabilitada
 */
export function validateNotionWebhook(request: Request, rawBody: string): boolean {
  // Si no hay token de verificaci√≥n configurado, saltamos la validaci√≥n
  const verificationToken = process.env.NOTION_VERIFICATION_TOKEN;
  if (!verificationToken) {
    console.log('‚ö†Ô∏è Token de verificaci√≥n no configurado - saltando validaci√≥n de firma');
    return true;
  }

  // Obtener la firma del header
  const signature = request.headers.get('X-Notion-Signature');
  if (!signature) {
    console.log('‚ö†Ô∏è Falta header X-Notion-Signature');
    return false;
  }

  // Validar la firma
  const isValid = validateNotionSignature(rawBody, signature, verificationToken);
  
  if (!isValid) {
    console.log('‚ùå Firma de Notion inv√°lida');
  } else {
    console.log('‚úÖ Firma de Notion v√°lida');
  }

  return isValid;
}
</file>

<file path=".env.example">
# Configuraci√≥n para Notion-Todoist Integration

# Token de acceso de Notion (obligatorio)
# Ve a https://www.notion.so/my-integrations para crear un token
NOTION_TOKEN=secret_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Token de verificaci√≥n de webhooks de Notion (opcional pero recomendado)
# Se obtiene durante la verificaci√≥n inicial del webhook
NOTION_VERIFICATION_TOKEN=secret_tMrlL1qK5vuQAh1b6cZGhFChZTSYJlce98V0pYn7yBl

# Token de API de Todoist (obligatorio)
# Ve a https://todoist.com/prefs/integrations para obtener tu token
TODOIST_API_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# ID de tu usuario en Notion (opcional)
# Si se configura, solo se crear√°n tareas cuando seas mencionado
# Para obtenerlo, puedes usar la API de Notion o dejarlo vac√≠o para procesar todas las p√°ginas
NOTION_USER_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx

# ID del proyecto de Todoist donde se crear√°n las tareas (opcional)
# Si no se especifica, se crear√°n en la bandeja de entrada
TODOIST_PROJECT_ID=2xxxxxxxxx

# Clave de API de OpenAI (opcional)
# Si se configura, las tareas se enriquecer√°n con IA
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Habilitar enriquecimiento con IA (opcional, por defecto false)
ENABLE_AI_ENHANCEMENT=true

# URL de tu aplicaci√≥n para webhooks (se usa en scripts de prueba)
# En desarrollo: http://localhost:3000
# En producci√≥n: https://tu-dominio.vercel.app
APP_URL=http://localhost:3000
</file>

<file path=".eslintrc.json">
{
  "extends": [
    "next/core-web-vitals",
    "next/typescript"
  ],
  "rules": {
    // Reglas de calidad de c√≥digo
    "prefer-const": "error",
    "no-var": "error",
    "no-unused-vars": "off", // Deshabilitado en favor de @typescript-eslint/no-unused-vars
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_",
        "caughtErrorsIgnorePattern": "^_"
      }
    ],
    
    // Reglas de React
    "react/jsx-key": "error",
    "react/jsx-no-duplicate-props": "error",
    "react/jsx-no-undef": "error",
    "react/no-children-prop": "error",
    "react/no-unescaped-entities": "warn",
    
    // Reglas de hooks
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    
    // Reglas de accesibilidad b√°sicas
    "jsx-a11y/alt-text": "warn",
    "jsx-a11y/anchor-has-content": "warn",
    "jsx-a11y/no-redundant-roles": "warn",
    
    // Reglas de estilo opcional
    "import/order": [
      "warn",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index"
        ],
        "newlines-between": "never"
      }
    ]
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    formats: ['image/webp', 'image/avif'],
  },
}

module.exports = nextConfig
</file>

<file path="NOTION_TODOIST_README.md">
# Notion-Todoist Integration

Automatizaci√≥n completa que conecta Notion con Todoist para crear tareas autom√°ticamente cuando eres mencionado o asignado en p√°ginas de Notion.

## üöÄ Caracter√≠sticas

- ‚úÖ Webhook de Notion para eventos en tiempo real
- ‚úÖ Creaci√≥n autom√°tica de tareas en Todoist
- ‚úÖ Enriquecimiento opcional con IA usando OpenAI
- ‚úÖ Detecci√≥n inteligente de menciones de usuario
- ‚úÖ Extracci√≥n autom√°tica de metadatos (prioridad, fechas, etiquetas)
- ‚úÖ Manejo robusto de errores y logging
- ‚úÖ Scripts de prueba incluidos

## üìã Configuraci√≥n

### 1. Variables de Entorno

Copia `.env.example` a `.env.local` y completa las siguientes variables:

#### Obligatorias:
```bash
NOTION_TOKEN=secret_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
TODOIST_API_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
```

#### Opcionales:
```bash
NOTION_USER_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
TODOIST_PROJECT_ID=2xxxxxxxxx
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
ENABLE_AI_ENHANCEMENT=true
```

### 2. Obtener Tokens

#### Notion Token:
1. Ve a [Notion Integrations](https://www.notion.so/my-integrations)
2. Crea una nueva integraci√≥n
3. Copia el token secreto
4. Comparte tu base de datos/p√°ginas con la integraci√≥n

#### Todoist Token:
1. Ve a [Todoist Settings > Integrations](https://todoist.com/prefs/integrations)
2. Copia tu API token

#### OpenAI Key (opcional):
1. Ve a [OpenAI API Keys](https://platform.openai.com/api-keys)
2. Crea una nueva API key

### 3. Configurar Webhook en Notion

Sigue estos pasos basados en la documentaci√≥n oficial de Notion:

1. **Crear suscripci√≥n**:
   - Ve a tu integraci√≥n en [Notion Integrations](https://www.notion.so/my-integrations)
   - Navega a la pesta√±a "Webhooks"
   - Haz clic en "+ Create a subscription"

2. **Configurar endpoint**:
   - **Endpoint URL**: 
     - **Producci√≥n**: `https://tu-dominio.vercel.app/api/notion-webhook`
     - **Desarrollo**: Usa ngrok (ver secci√≥n de desarrollo local)
   - **Events**: Selecciona los eventos que quieres:
     - `page.content_updated` - Cuando se actualiza contenido de p√°gina
     - `page.created` - Cuando se crea una nueva p√°gina
     - `comment.created` - Cuando se crea un comentario

3. **Verificar suscripci√≥n**:
   - Notion enviar√° un `verification_token` a tu endpoint
   - Copia el token de los logs de tu servidor
   - P√©galo en el formulario de verificaci√≥n de Notion
   - Haz clic en "Verify subscription"

4. **Configurar validaci√≥n de firmas** (recomendado para producci√≥n):
   - Agrega el `verification_token` a `NOTION_VERIFICATION_TOKEN` en tus variables de entorno
   - Esto habilita la validaci√≥n criptogr√°fica de payloads

‚ö†Ô∏è **IMPORTANTE**: 
- NO uses `localhost` - Notion no puede acceder a tu m√°quina local
- La URL debe ser HTTPS y p√∫blicamente accesible
- Los eventos pueden tener un retraso de hasta 1 minuto (son agregados)

## üîß Instalaci√≥n

```bash
# Instalar dependencias
npm install

# Configurar variables de entorno
cp .env.example .env.local
# Edita .env.local con tus tokens

# Iniciar en desarrollo
npm run dev
```

## üîß Desarrollo Local con Webhooks Reales

Para probar webhooks reales desde Notion en desarrollo local:

### 1. Usar ngrok (Recomendado):
```bash
# Instalar ngrok globalmente
npm install -g ngrok

# En una terminal, iniciar tu servidor
npm run dev

# En otra terminal, exponer el puerto
ngrok http 3000

# Copiar la URL HTTPS que aparece (ej: https://abc123.ngrok.io)
# Configurar webhook en Notion: https://abc123.ngrok.io/api/notion-webhook
```

### 2. Alternativa con tunnelmole:
```bash
# Instalar tunnelmole
npm install -g tunnelmole

# Exponer puerto
tmole 3000

# Usar la URL que te proporciona
```

### 3. Solo para Pruebas B√°sicas:
Usa el script de prueba que simula webhooks:
```bash
npm run test:webhook

## üß™ Pruebas

### Prueba Local (SIN webhook):
```bash
npm run test:webhook
```

### Prueba con Webhook Real (Desarrollo):
```bash
# 1. Instalar ngrok
npm install -g ngrok

# 2. Exponer tu servidor local
ngrok http 3000
# Copiar la URL https (ej: https://abc123.ngrok.io)

# 3. Configurar webhook en Notion con:
# https://abc123.ngrok.io/api/notion-webhook

# 4. Crear/editar una p√°gina en Notion y mencionar tu usuario
```

### Verificar Estado del Endpoint:
```bash
curl http://localhost:3000/api/notion-webhook
```

### Prueba Manual con cURL:
```bash
curl -X POST http://localhost:3000/api/notion-webhook \\
  -H "Content-Type: application/json" \\
  -H "notion-version: 2022-06-28" \\
  -d '{
    "object": "page",
    "event_type": "page.property_updated",
    "page": {
      "id": "test-page-id",
      "properties": {},
      "url": "https://notion.so/test"
    }
  }'
```

## üöÄ Despliegue en Vercel

### 1. Conectar Repositorio
1. Ve a [Vercel Dashboard](https://vercel.com/dashboard)
2. Importa tu repositorio de GitHub
3. Configura el proyecto como Next.js

### 2. Configurar Variables de Entorno en Vercel
Ve a Project Settings > Environment Variables y agrega:

```
NOTION_TOKEN=secret_xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
TODOIST_API_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
NOTION_USER_ID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
TODOIST_PROJECT_ID=2xxxxxxxxx
OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
ENABLE_AI_ENHANCEMENT=true
```

### 3. Actualizar Webhook URL
Actualiza la URL del webhook en Notion a:
```
https://tu-proyecto.vercel.app/api/notion-webhook
```

## üìÅ Estructura del Proyecto

```
src/
‚îú‚îÄ‚îÄ app/api/notion-webhook/
‚îÇ   ‚îî‚îÄ‚îÄ route.ts              # Endpoint principal del webhook
‚îú‚îÄ‚îÄ types/
‚îÇ   ‚îî‚îÄ‚îÄ notion-todoist.ts     # Interfaces TypeScript
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ notion-client.ts      # Cliente de Notion
‚îÇ   ‚îú‚îÄ‚îÄ todoist-client.ts     # Cliente de Todoist
‚îÇ   ‚îî‚îÄ‚îÄ openai-client.ts      # Cliente de OpenAI
‚îî‚îÄ‚îÄ scripts/
    ‚îî‚îÄ‚îÄ test-webhook.js       # Scripts de prueba
```

## üîÑ Flujo de Trabajo

1. **Evento en Notion**: Se actualiza/crea una p√°gina
2. **Webhook**: Notion env√≠a evento al endpoint
3. **Verificaci√≥n**: Se verifica si el usuario est√° mencionado
4. **Extracci√≥n**: Se extrae contenido y metadatos de la p√°gina
5. **Enriquecimiento**: (Opcional) Se mejora con IA
6. **Creaci√≥n**: Se crea la tarea en Todoist
7. **Respuesta**: Se confirma el resultado

## ü§ñ Enriquecimiento con IA

Cuando est√° habilitado, OpenAI:
- Mejora el t√≠tulo de la tarea
- Crea una descripci√≥n m√°s detallada
- Sugiere prioridad apropiada
- Recomienda etiquetas relevantes
- Propone fechas de vencimiento

## üõ†Ô∏è Troubleshooting

### Error: "Token no v√°lido"
- Verifica que el token de Notion/Todoist sea correcto
- Aseg√∫rate de que la integraci√≥n tenga permisos

### Error: "Usuario no mencionado"
- Verifica que `NOTION_USER_ID` sea correcto
- Aseg√∫rate de estar mencionado en la p√°gina (@usuario)

### Error: "No se pudo crear tarea"
- Verifica el token de Todoist
- Comprueba que `TODOIST_PROJECT_ID` existe

### Webhook no funciona
- Verifica la URL del webhook en Notion
- Comprueba que el endpoint est√© accesible p√∫blicamente
- Revisa los logs en Vercel

## üìä Monitoreo

### Logs en Desarrollo:
```bash
npm run dev
# Los logs aparecer√°n en la consola
```

### Logs en Producci√≥n:
Ve a Vercel Dashboard > Tu Proyecto > Functions > Logs

## üîê Seguridad

- Nunca expongas tus tokens en el c√≥digo
- Usa variables de entorno para configuraci√≥n
- El archivo `.env.local` est√° en `.gitignore`
- Considera verificar firmas de webhook para mayor seguridad

## üìà Pr√≥ximos Pasos

- [ ] Verificaci√≥n de firmas de webhook
- [ ] Soporte para m√°s tipos de metadatos de Notion
- [ ] Integraci√≥n con m√°s servicios (Slack, Discord)
- [ ] Dashboard web para configuraci√≥n
- [ ] Sincronizaci√≥n bidireccional

## ü§ù Contribuir

1. Fork el repositorio
2. Crea una rama: `git checkout -b feature/nueva-funcionalidad`
3. Commit cambios: `git commit -am 'Agregar nueva funcionalidad'`
4. Push: `git push origin feature/nueva-funcionalidad`
5. Crear Pull Request
</file>

<file path="README.md">
# Sebastian Ruiz - Personal Portfolio

A modern, responsive portfolio website built with Next.js, TypeScript, and SCSS. Features smooth animations, clean design, and optimized performance.

## üöÄ Features

- **Modern Tech Stack**: Next.js 15, React 19, TypeScript, SCSS
- **Responsive Design**: Mobile-first approach with optimized layouts
- **Smooth Animations**: Framer Motion for engaging user interactions
- **Performance Optimized**: Image optimization, lazy loading, and efficient bundling
- **SEO Friendly**: Meta tags, structured data, and accessibility features
- **Clean Code**: TypeScript interfaces, custom hooks, and reusable components

## üõ†Ô∏è Tech Stack

- **Framework**: Next.js 15 with App Router
- **Language**: TypeScript
- **Styling**: SCSS with CSS custom properties
- **Animations**: Framer Motion
- **Package Manager**: npm
- **Deployment**: Vercel

## üìÅ Project Structure

```
src/
‚îú‚îÄ‚îÄ app/                    # Next.js App Router
‚îú‚îÄ‚îÄ components/             # React components
‚îÇ   ‚îú‚îÄ‚îÄ common/            # Reusable components (Icon, etc.)
‚îÇ   ‚îî‚îÄ‚îÄ ...                # Feature-specific components
‚îú‚îÄ‚îÄ config/                # App configuration and constants
‚îú‚îÄ‚îÄ data/                  # JSON data files
‚îú‚îÄ‚îÄ hooks/                 # Custom React hooks
‚îú‚îÄ‚îÄ styles/                # SCSS stylesheets
‚îú‚îÄ‚îÄ types/                 # TypeScript type definitions
‚îî‚îÄ‚îÄ utils/                 # Utility functions and helpers
```

## üöÄ Getting Started

### Prerequisites

- Node.js 18+ 
- npm or yarn

### Installation

1. Clone the repository:
```bash
git clone https://github.com/imsebarz/personal-website.git
cd personal-website
```

2. Install dependencies:
```bash
npm install
```

3. Run the development server:
```bash
npm run dev
```

4. Open [http://localhost:3000](http://localhost:3000) in your browser

### Build for Production

```bash
npm run build
npm start
```

## üì¶ Scripts

- `npm run dev` - Start development server
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm run lint` - Run ESLint
- `npm run type-check` - Run TypeScript compiler

## üé® Key Features

### Component Architecture
- **Reusable Components**: Icon component for consistent SVG usage
- **Custom Hooks**: Data fetching hooks for clean component logic
- **TypeScript**: Full type safety throughout the application

### Performance Optimizations
- **Image Optimization**: Next.js Image component with WebP format
- **Code Splitting**: Automatic code splitting with Next.js
- **CSS Variables**: Consistent theming and easier maintenance
- **Animation Performance**: Optimized Framer Motion configurations

### Accessibility
- **Semantic HTML**: Proper heading hierarchy and landmarks
- **Focus Management**: Keyboard navigation support
- **Alt Text**: Descriptive alt text for all images
- **ARIA Labels**: Screen reader friendly components

## üåü Sections

1. **Hero** - Introduction with animated greeting
2. **About Me** - Personal background and skills
3. **Featured Projects** - Highlighted work with details
4. **My Work** - Project gallery with tags and links
5. **Contact** - Get in touch section
6. **Footer** - Social links and credits

## üîß Configuration

### Environment Variables
Create a `.env.local` file for environment-specific configurations:

```env
# Add your environment variables here
NEXT_PUBLIC_SITE_URL=https://yourdomain.com
```

### Customization
- **Colors**: Edit `src/styles/colors.scss`
- **Fonts**: Update font imports in `src/app/layout.tsx`
- **Content**: Modify JSON files in `src/data/`
- **Animations**: Adjust settings in `src/utils/animation.ts`

## üì± Responsive Design

The website is fully responsive with breakpoints:
- **Mobile**: < 600px
- **Tablet**: 600px - 900px  
- **Desktop**: > 900px

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Commit changes: `git commit -m 'Add feature'`
4. Push to branch: `git push origin feature-name`
5. Submit a pull request

## üìÑ License

This project is open source and available under the [MIT License](LICENSE).

## üìß Contact

- **Email**: imsebarz@gmail.com
- **LinkedIn**: [imsebarz](https://linkedin.com/in/imsebarz)
- **GitHub**: [imsebarz](https://github.com/imsebarz)
- **Portfolio**: [imsebarz.vercel.app](https://imsebarz.vercel.app)

---

Made with üíõ by Sebastian Ruiz
</file>

<file path="site.webmanifest">
{"name":"","short_name":"","icons":[{"src":"/android-chrome-192x192.png","sizes":"192x192","type":"image/png"},{"src":"/android-chrome-512x512.png","sizes":"512x512","type":"image/png"}],"theme_color":"#ffffff","background_color":"#ffffff","display":"standalone"}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"],
      "@/components/*": ["./src/components/*"],
      "@/assets/*": ["./src/assets/*"],
      "@/styles/*": ["./src/styles/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/app/page.tsx">
import Nav from '@/components/Nav'
import FloatSocial from '@/components/FloatSocial'
import FloatMail from '@/components/FloatMail'
import Hero from '@/components/Hero'
import AboutMe from '@/components/AboutMe'
import MyWork from '@/components/MyWork'
import FeaturedProjects from '@/components/FeaturedProjects'
import Footer from '@/components/Footer'
import Contact from '@/components/Contact'

export default function Home() {
  return (
    <>
      <Nav />
      <main>
        <FloatSocial />
        <FloatMail />
        <Hero />
        <AboutMe />
        <FeaturedProjects />
        <MyWork />
        <Contact />
      </main>
      <Footer />
    </>
  )
}
</file>

<file path="src/components/Nav.tsx">
'use client'

import React, { useState } from 'react'
import '@/styles/nav.scss'
import navStrings from '@/data/nav.json'
import socialStrings from '@/data/contact.json'

const Nav: React.FC = () => {
  const [sideDisplay, setSideDisplay] = useState<string>('-100%')
  const [isOpen, setIsOpen] = useState<string>('closed')

  const toggleSidebar = (): void => {
    if (sideDisplay === '-100%') {
      setSideDisplay('0%')
      setIsOpen('open')
    } else {
      setSideDisplay('-100%')
      setIsOpen('closed')
    }
  }

  return (
    <nav className="nav">
      <a href="#">
        <h1>{navStrings.name}</h1>
      </a>
      <ul className="nav-links">
        <li>
          <a href="#aboutme">{navStrings.links.aboutMe}</a>
        </li>
        <li>
          <a href="#featuredProjects">{navStrings.links.featuredProjects}</a>
        </li>
        <li>
          <a href="#mywork">{navStrings.links.projects}</a>
        </li>
        <li>
          <a href="#contact">{navStrings.links.contact}</a>
        </li>
        <a
          href={navStrings.resumeLink}
          target="_blank"
          rel="noopener noreferrer"
        >
          <button>{navStrings.links.resume}</button>
        </a>
      </ul>
      <div className={`hamburger ${isOpen}`} onClick={toggleSidebar}>
        <svg
          width="105"
          height="90"
          viewBox="0 0 105 90"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <g id="hamburger">
            <path
              id="bottom"
              d="M10.5875 70.3995H94.5039C95.7861 70.3995 97.0558 70.6521 98.2405 71.1428C99.4251 71.6335 100.502 72.3527 101.408 73.2594C102.315 74.1661 103.034 75.2425 103.525 76.4271C104.016 77.6118 104.268 78.8815 104.268 80.1637C104.268 81.446 104.016 82.7157 103.525 83.9003C103.034 85.085 102.315 86.1614 101.408 87.0681C100.502 87.9748 99.4251 88.694 98.2405 89.1847C97.0558 89.6754 95.7861 89.928 94.5039 89.928H10.5875C9.30528 89.928 8.03558 89.6754 6.85093 89.1847C5.66628 88.694 4.58988 87.9748 3.68318 87.0681C2.77649 86.1614 2.05726 85.085 1.56656 83.9003C1.07586 82.7157 0.823303 81.446 0.823303 80.1637C0.823303 78.8815 1.07586 77.6118 1.56656 76.4271C2.05726 75.2425 2.77649 74.1661 3.68318 73.2594C4.58988 72.3527 5.66628 71.6335 6.85093 71.1428C8.03558 70.6521 9.30528 70.3995 10.5875 70.3995V70.3995Z"
              fill="#E9E9E9"
            />
            <path
              id="middle"
              d="M10.5875 35.267H94.5039C95.7861 35.267 97.0558 35.5195 98.2405 36.0102C99.4251 36.5009 100.502 37.2201 101.408 38.1268C102.315 39.0335 103.034 40.1099 103.525 41.2946C104.016 42.4792 104.268 43.7489 104.268 45.0312C104.268 46.3134 104.016 47.5832 103.525 48.7678C103.034 49.9525 102.315 51.0289 101.408 51.9355C100.502 52.8422 99.4251 53.5615 98.2405 54.0522C97.0558 54.5429 95.7861 54.7954 94.5039 54.7954H10.5875C9.30528 54.7954 8.03558 54.5429 6.85093 54.0522C5.66628 53.5615 4.58988 52.8422 3.68318 51.9355C2.77649 51.0289 2.05726 49.9525 1.56656 48.7678C1.07586 47.5832 0.823303 46.3134 0.823303 45.0312C0.823303 43.7489 1.07586 42.4792 1.56656 41.2946C2.05726 40.1099 2.77649 39.0335 3.68318 38.1268C4.58988 37.2201 5.66628 36.5009 6.85093 36.0102C8.03558 35.5195 9.30528 35.267 10.5875 35.267V35.267Z"
              fill="#E9E9E9"
            />
            <path
              id="top"
              d="M10.5875 0.138149H94.5039C97.0935 0.138149 99.5771 1.16688 101.408 2.99803C103.239 4.82918 104.268 7.31275 104.268 9.90238C104.268 12.492 103.239 14.9756 101.408 16.8067C99.5771 18.6379 97.0935 19.6666 94.5039 19.6666H10.5875C7.9979 19.6666 5.51433 18.6379 3.68318 16.8067C1.85203 14.9756 0.823303 12.492 0.823303 9.90238C0.823303 7.31275 1.85203 4.82918 3.68318 2.99803C5.51433 1.16688 7.9979 0.138149 10.5875 0.138149V0.138149Z"
              fill="#E9E9E9"
            />
          </g>
        </svg>
      </div>
      <aside className="sidebar" style={{ right: sideDisplay }}>
        <ul className="aside-links">
          <li>
            <a href="#aboutme">{navStrings.links.aboutMe}</a>
          </li>
          <li>
            <a href="#featuredProjects">{navStrings.links.featuredProjects}</a>
          </li>
          <li>
            <a href="#mywork">{navStrings.links.projects}</a>
          </li>
          <li>
            <a href="#contact">{navStrings.links.contact}</a>
          </li>
          <a
            href={navStrings.resumeLink}
            target="_blank"
            rel="noopener noreferrer"
          >
            <button>{navStrings.links.resume}</button>
          </a>
          <ul className="aside-social">
            <li>
              <a href={socialStrings.socials.github} target="_blank" rel="noopener noreferrer">
                <svg
                  width="21"
                  height="21"
                  viewBox="0 0 25 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g id="Github">
                    <path
                      d="M12.5516 0.454773C5.92157 0.454773 0.551575 5.82477 0.551575 12.4548C0.551575 17.7648 3.98657 22.2498 8.75657 23.8398C9.35657 23.9448 9.58157 23.5848 9.58157 23.2698C9.58157 22.9848 9.56658 22.0398 9.56658 21.0348C6.55157 21.5898 5.77157 20.2998 5.53157 19.6248C5.39657 19.2798 4.81157 18.2148 4.30157 17.9298C3.88157 17.7048 3.28157 17.1498 4.28657 17.1348C5.23157 17.1198 5.90657 18.0048 6.13157 18.3648C7.21157 20.1798 8.93657 19.6698 9.62657 19.3548C9.73157 18.5748 10.0466 18.0498 10.3916 17.7498C7.72157 17.4498 4.93157 16.4148 4.93157 11.8248C4.93157 10.5198 5.39657 9.43977 6.16157 8.59977C6.04157 8.29977 5.62157 7.06977 6.28157 5.41977C6.28157 5.41977 7.28657 5.10477 9.58157 6.64977C10.5416 6.37977 11.5616 6.24477 12.5816 6.24477C13.6016 6.24477 14.6216 6.37977 15.5816 6.64977C17.8766 5.08977 18.8816 5.41977 18.8816 5.41977C19.5416 7.06977 19.1216 8.29977 19.0016 8.59977C19.7666 9.43977 20.2316 10.5048 20.2316 11.8248C20.2316 16.4298 17.4266 17.4498 14.7566 17.7498C15.1916 18.1248 15.5666 18.8448 15.5666 19.9698C15.5666 21.5748 15.5516 22.8648 15.5516 23.2698C15.5516 23.5848 15.7766 23.9598 16.3766 23.8398C18.7588 23.0355 20.8288 21.5045 22.2952 19.4621C23.7617 17.4198 24.5509 14.9691 24.5516 12.4548C24.5516 5.82477 19.1816 0.454773 12.5516 0.454773Z"
                      fill="currentColor"
                    />
                  </g>
                </svg>
              </a>
            </li>
            <li>
              <a href={socialStrings.socials.twitter} target="_blank" rel="noopener noreferrer">
                <svg
                  width="21"
                  height="21"
                  viewBox="0 0 23 19"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g id="Twitter">
                    <path
                      id="Vector"
                      d="M22.869 2.41503C22.034 2.78503 21.137 3.03503 20.194 3.14803C21.167 2.56582 21.8949 1.64949 22.242 0.570028C21.3278 1.11302 20.3273 1.49522 19.284 1.70003C18.5824 0.950893 17.653 0.454354 16.6403 0.287502C15.6276 0.12065 14.5881 0.29282 13.6832 0.777281C12.7784 1.26174 12.0588 2.03139 11.6361 2.96673C11.2135 3.90207 11.1115 4.95078 11.346 5.95003C9.49367 5.85702 7.68161 5.37558 6.02741 4.53693C4.37321 3.69829 2.91383 2.52119 1.74399 1.08203C1.34399 1.77203 1.11399 2.57203 1.11399 3.42403C1.11354 4.19102 1.30242 4.94627 1.66387 5.62276C2.02531 6.29925 2.54815 6.87607 3.18599 7.30203C2.44626 7.27849 1.72286 7.07861 1.07599 6.71903V6.77903C1.07591 7.85477 1.44802 8.89741 2.12917 9.73002C2.81032 10.5626 3.75856 11.134 4.81299 11.347C4.12677 11.5327 3.40732 11.5601 2.70899 11.427C3.00648 12.3526 3.58598 13.1621 4.36635 13.742C5.14673 14.3219 6.0889 14.6432 7.06099 14.661C5.41082 15.9564 3.37287 16.6591 1.27499 16.656C0.903368 16.6561 0.532063 16.6344 0.162987 16.591C2.29246 17.9602 4.77133 18.6868 7.30299 18.684C15.873 18.684 20.558 11.586 20.558 5.43003C20.558 5.23003 20.553 5.02803 20.544 4.82803C21.4553 4.169 22.2419 3.35292 22.867 2.41803L22.869 2.41503V2.41503Z"
                      fill="currentColor"
                    />
                  </g>
                </svg>
              </a>
            </li>
            <li>
              <a href={socialStrings.socials.linkedin} target="_blank" rel="noopener noreferrer">
                <svg
                  width="22"
                  height="22"
                  viewBox="0 0 22 22"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g id="LinkedIn">
                    <path
                      id="Vector"
                      fillRule="evenodd"
                      clipRule="evenodd"
                      d="M2.7206e-07 1.838C2.7206e-07 1.35053 0.193646 0.883032 0.538338 0.53834C0.88303 0.193648 1.35053 2.45031e-06 1.838 2.45031e-06H20.16C20.4016 -0.000392101 20.6409 0.0468654 20.8641 0.139069C21.0874 0.231273 21.2903 0.366612 21.4612 0.537339C21.6322 0.708065 21.7677 0.910826 21.8602 1.13401C21.9526 1.3572 22.0001 1.59643 22 1.838V20.16C22.0003 20.4016 21.9529 20.6409 21.8606 20.8642C21.7683 21.0875 21.6328 21.2904 21.462 21.4613C21.2912 21.6322 21.0884 21.7678 20.8651 21.8602C20.6419 21.9526 20.4026 22.0001 20.161 22H1.838C1.59655 22 1.35746 21.9524 1.1344 21.86C0.911335 21.7676 0.708671 21.6321 0.537984 21.4613C0.367297 21.2905 0.231932 21.0878 0.139623 20.8647C0.0473133 20.6416 -0.000131096 20.4025 2.7206e-07 20.161V1.838ZM8.708 8.388H11.687V9.884C12.117 9.024 13.217 8.25 14.87 8.25C18.039 8.25 18.79 9.963 18.79 13.106V18.928H15.583V13.822C15.583 12.032 15.153 11.022 14.061 11.022C12.546 11.022 11.916 12.111 11.916 13.822V18.928H8.708V8.388ZM3.208 18.791H6.416V8.25H3.208V18.79V18.791ZM6.875 4.812C6.88105 5.08667 6.83217 5.35979 6.73124 5.61532C6.63031 5.87084 6.47935 6.10364 6.28723 6.30003C6.09511 6.49643 5.8657 6.65248 5.61246 6.75901C5.35921 6.86554 5.08724 6.92042 4.8125 6.92042C4.53776 6.92042 4.26579 6.86554 4.01255 6.75901C3.7593 6.65248 3.52989 6.49643 3.33777 6.30003C3.14565 6.10364 2.99469 5.87084 2.89376 5.61532C2.79283 5.35979 2.74395 5.08667 2.75 4.812C2.76187 4.27286 2.98439 3.75979 3.36989 3.38269C3.75539 3.00558 4.27322 2.79442 4.8125 2.79442C5.35178 2.79442 5.86961 3.00558 6.25512 3.38269C6.64062 3.75979 6.86313 4.27286 6.875 4.812V4.812Z"
                      fill="currentColor"
                    />
                  </g>
                </svg>
              </a>
            </li>
            <li>
              <a href={socialStrings.socials.instagram} target="_blank" rel="noopener noreferrer">
                <svg
                  width="21"
                  height="21"
                  viewBox="0 0 22 22"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <g id="Instagram">
                    <path
                      id="Vector"
                      d="M6.465 0.066C7.638 0.012 8.012 0 11 0C13.988 0 14.362 0.013 15.534 0.066C16.706 0.119 17.506 0.306 18.206 0.577C18.939 0.854 19.604 1.287 20.154 1.847C20.714 2.396 21.146 3.06 21.422 3.794C21.694 4.494 21.88 5.294 21.934 6.464C21.988 7.639 22 8.013 22 11C22 13.988 21.987 14.362 21.934 15.535C21.881 16.705 21.694 17.505 21.422 18.205C21.146 18.9391 20.7133 19.6042 20.154 20.154C19.604 20.714 18.939 21.146 18.206 21.422C17.506 21.694 16.706 21.88 15.536 21.934C14.362 21.988 13.988 22 11 22C8.012 22 7.638 21.987 6.465 21.934C5.295 21.881 4.495 21.694 3.795 21.422C3.06092 21.146 2.39582 20.7133 1.846 20.154C1.28638 19.6047 0.853315 18.9399 0.577 18.206C0.306 17.506 0.12 16.706 0.066 15.536C0.012 14.361 0 13.987 0 11C0 8.012 0.013 7.638 0.066 6.466C0.119 5.294 0.306 4.494 0.577 3.794C0.853723 3.06008 1.28712 2.39531 1.847 1.846C2.39604 1.2865 3.06047 0.853443 3.794 0.577C4.494 0.306 5.294 0.12 6.464 0.066H6.465ZM15.445 2.046C14.285 1.993 13.937 1.982 11 1.982C8.063 1.982 7.715 1.993 6.555 2.046C5.482 2.095 4.9 2.274 4.512 2.425C3.999 2.625 3.632 2.862 3.247 3.247C2.88205 3.60205 2.60118 4.03428 2.425 4.512C2.274 4.9 2.095 5.482 2.046 6.555C1.993 7.715 1.982 8.063 1.982 11C1.982 13.937 1.993 14.285 2.046 15.445C2.095 16.518 2.274 17.1 2.425 17.488C2.601 17.965 2.882 18.398 3.247 18.753C3.602 19.118 4.035 19.399 4.512 19.575C4.9 19.726 5.482 19.905 6.555 19.954C7.715 20.007 8.062 20.018 11 20.018C13.938 20.018 14.285 20.007 15.445 19.954C16.518 19.905 17.1 19.726 17.488 19.575C18.001 19.375 18.368 19.138 18.753 18.753C19.118 18.398 19.399 17.965 19.575 17.488C19.726 17.1 19.905 16.518 19.954 15.445C20.007 14.285 20.018 13.937 20.018 11C20.018 8.063 20.007 7.715 19.954 6.555C19.905 5.482 19.726 4.9 19.575 4.512C19.375 3.999 19.138 3.632 18.753 3.247C18.3979 2.88207 17.9657 2.60121 17.488 2.425C17.1 2.274 16.518 2.095 15.445 2.046V2.046ZM9.595 14.391C10.3797 14.7176 11.2534 14.7617 12.0669 14.5157C12.8805 14.2697 13.5834 13.7489 14.0556 13.0422C14.5278 12.3356 14.7401 11.4869 14.656 10.6411C14.572 9.79534 14.197 9.00497 13.595 8.405C13.2112 8.02148 12.7472 7.72781 12.2363 7.54515C11.7255 7.36248 11.1804 7.29536 10.6405 7.34862C10.1006 7.40187 9.57915 7.57418 9.1138 7.85313C8.64846 8.13208 8.25074 8.51074 7.9493 8.96185C7.64786 9.41296 7.45019 9.92529 7.37052 10.462C7.29084 10.9986 7.33115 11.5463 7.48854 12.0655C7.64593 12.5847 7.91648 13.0626 8.28072 13.4647C8.64496 13.8668 9.09382 14.1832 9.595 14.391ZM7.002 7.002C7.52702 6.47698 8.15032 6.0605 8.8363 5.77636C9.52228 5.49222 10.2575 5.34597 11 5.34597C11.7425 5.34597 12.4777 5.49222 13.1637 5.77636C13.8497 6.0605 14.473 6.47698 14.998 7.002C15.523 7.52702 15.9395 8.15032 16.2236 8.8363C16.5078 9.52228 16.654 10.2575 16.654 11C16.654 11.7425 16.5078 12.4777 16.2236 13.1637C15.9395 13.8497 15.523 14.473 14.998 14.998C13.9377 16.0583 12.4995 16.654 11 16.654C9.50046 16.654 8.06234 16.0583 7.002 14.998C5.94166 13.9377 5.34597 12.4995 5.34597 11C5.34597 9.50046 5.94166 8.06234 7.002 7.002V7.002ZM17.908 6.188C18.0381 6.06527 18.1423 5.91768 18.2143 5.75397C18.2863 5.59027 18.3248 5.41377 18.3274 5.23493C18.33 5.05609 18.2967 4.87855 18.2295 4.71281C18.1622 4.54707 18.0624 4.39651 17.936 4.27004C17.8095 4.14357 17.6589 4.04376 17.4932 3.97652C17.3275 3.90928 17.1499 3.87598 16.9711 3.87858C16.7922 3.88119 16.6157 3.91965 16.452 3.9917C16.2883 4.06374 16.1407 4.1679 16.018 4.298C15.7793 4.55103 15.6486 4.88712 15.6537 5.23493C15.6588 5.58274 15.7992 5.91488 16.0452 6.16084C16.2911 6.40681 16.6233 6.54723 16.9711 6.5523C17.3189 6.55737 17.655 6.42669 17.908 6.188V6.188Z"
                      fill="currentColor"
                    />
                  </g>
                </svg>
              </a>
            </li>
          </ul>
        </ul>
      </aside>
    </nav>
  )
}

export default Nav
</file>

<file path="src/config/constants.ts">
export const APP_CONFIG = {
  PATHS: {
    FONTS: '/fonts/Recoleta.otf',
    IMAGES: '/images/',
  },
  
  NAVIGATION: {
    SCROLL_OFFSET: 100,
    MOBILE_BREAKPOINT: 900,
  },
  
  ANIMATION: {
    DURATION: {
      FAST: 0.2,
      NORMAL: 0.3,
      SLOW: 0.5,
    },
    EASING: 'ease',
  },
  
  SOCIAL_LINKS: {
    GITHUB: 'https://github.com/imsebarz',
    LINKEDIN: 'https://linkedin.com/in/imsebarz',
    TWITTER: 'https://twitter.com/imsebarz',
    INSTAGRAM: 'https://instagram.com/imsebarz',
  },
  
  CONTACT: {
    EMAIL: 'sebastian@example.com',
    RESUME_LINK: '#',
  },
} as const
export type SocialPlatform = keyof typeof APP_CONFIG.SOCIAL_LINKS
export type AnimationDuration = keyof typeof APP_CONFIG.ANIMATION.DURATION
</file>

<file path="src/hooks/useData.ts">
import { useState, useEffect } from 'react'
import type { Project, PersonalInfo, NavigationLinks, ContactInfo } from '@/types'

export const useProjects = () => {
  const [projects, setProjects] = useState<Project[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const loadProjects = async () => {
      try {
        const response = await import('@/data/projects.json')
        setProjects(response.projects)
      } catch (err) {
        setError('Error loading projects')
        console.error('Error loading projects:', err)
      } finally {
        setLoading(false)
      }
    }

    loadProjects()
  }, [])

  return { projects, loading, error }
}

export const usePersonalInfo = () => {
  const [personalInfo, setPersonalInfo] = useState<PersonalInfo | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const loadPersonalInfo = async () => {
      try {
        const response = await import('@/data/aboutme.json')
        setPersonalInfo(response.default)
      } catch (err) {
        setError('Error loading personal info')
        console.error('Error loading personal info:', err)
      } finally {
        setLoading(false)
      }
    }

    loadPersonalInfo()
  }, [])

  return { personalInfo, loading, error }
}

export const useNavigation = () => {
  const [navigation, setNavigation] = useState<NavigationLinks | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const loadNavigation = async () => {
      try {
        const response = await import('@/data/nav.json')
        setNavigation(response.default)
      } catch (err) {
        setError('Error loading navigation')
        console.error('Error loading navigation:', err)
      } finally {
        setLoading(false)
      }
    }

    loadNavigation()
  }, [])

  return { navigation, loading, error }
}

export const useContact = () => {
  const [contact, setContact] = useState<ContactInfo | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const loadContact = async () => {
      try {
        const response = await import('@/data/contact.json')
        setContact(response.default)
      } catch (err) {
        setError('Error loading contact info')
        console.error('Error loading contact info:', err)
      } finally {
        setLoading(false)
      }
    }

    loadContact()
  }, [])

  return { contact, loading, error }
}
</file>

<file path="src/styles/contact.scss">
@use './colors.scss';

.contact {
  display: flex;
  flex-direction: column;
  min-height: 40vh;
  width: 100%;
  max-width: 800px;
  margin: 4em auto;
  padding: 3em 2em;
  place-items: center;
  justify-content: center;
  gap: 2em;
  background-color: colors.$mint;
  text-align: center;
  border-radius: 15px;
  
  .title {
    margin-bottom: 0;
    font-family: var(--font-recoleta);
  }
  
  p {
    font-size: 1.1rem;
    line-height: 1.6;
    max-width: 600px;
    margin: 0;
  }
  
  button {
    color: colors.$mint;
    background: colors.$green;
    height: 4em;
    width: 12em;
    padding: 1em;
    font-weight: 700;
    border-radius: 10px;
    border: none;
    font-size: 1rem;
    transition: all 0.3s ease;
  }
  
  button:hover {
    border: solid 2px colors.$green;
    color: colors.$green;
    background: colors.$mint;
    transform: translateY(-2px);
  }
}

@media screen and (max-width: 900px) {
  .contact {
    width: 95%;
    margin: 2em auto;
    padding: 2em 1em;
    
    .title {
      font-size: 2.5rem;
    }
    
    p {
      font-size: 1rem;
    }
    
    button {
      width: 10em;
      height: 3.5em;
    }
  }
}
</file>

<file path="src/styles/featuredproject.scss">
@use './colors.scss';

.ftProject {
  display: grid;
  height: max-content;
  gap: 5px;
  grid-template-columns: repeat(12, 1fr);
}

.ftProject-image {
  grid-column: 1 / 8;
  grid-row: 1 / 2;
  height: 100%;
  overflow: hidden;

  a {
    overflow: hidden;
    display: block;
    height: 100%;
  }
  img {
    height: 100%;
    width: 100%;
    filter: brightness(0.8) saturate(0.8);
    object-fit: cover;
    transition: all 0.3s ease;
  }
}
.ftProject-image:hover img {
  transform: scale(1.05);
  filter: brightness(0.9);
}

.ftProject-content {
  grid-column: 7 / -1;
  grid-row: 1 / 2;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  text-align: right;
  justify-content: space-evenly;
  .desc {
    background-color: colors.$green;
    padding: 2em;
    border-radius: 5px;
    margin-right: 1em;
    opacity: 0.8;
    p {
      color: colors.$mint;
      opacity: 1;
    }
  }
  .ftProject-links {
    display: flex;
    width: 70px;
    justify-content: space-evenly;
    
    a {
      color: colors.$pepper;
      transition: all 0.3s ease;
      
      &:hover {
        color: colors.$green;
        transform: translateY(-2px);
      }
      
      svg {
        width: 20px;
        height: 20px;
        transition: inherit;
      }
    }
  }
  ul {
    display: flex;
    width: 80%;
    flex-wrap: wrap;
    gap: 1vw;
    li {
      color: colors.$pepper;
      width: max-content;
    }
  }
}

.left {
  .ftProject-image {
    grid-column: 6 / -1;
    grid-row: 1 / 2;
  }

  .ftProject-content {
    grid-column: 1 / 7;
    grid-row: 1 / 2;
    align-items: flex-start;
    text-align: left;
    .desc {
      margin-left: 1em;
    }
  }
}

@media screen and (max-width: 900px) {
  .ftProject {
    border-radius: 5px;
    .ftProject-image {
      grid-column: 1 / -1;
      position: relative;
      img {
        filter: brightness(0.5) saturate(0.5) contrast(1.2);
      }
    }
    .ftProject-image::after {
      height: 100%;
      content: "";
      top: 0;
      width: 100%;
      background: #027555bb;
      position: absolute;
    }
    .ftProject-content {
      align-items: flex-start;
      text-align: left;
      padding: 3em;
      color: white;
      grid-column: 1 / -1;
      z-index: 5;
      h1 {
        color: colors.$mint;
      }
      .desc {
        background: transparent;
        margin: 0;
        padding: 0;
      }
      li {
        color: colors.$mint;
      }
      .ftProject-links {
        justify-content: space-between;
        svg {
          path {
            fill: colors.$mint !important;
          }
        }
      }
    }
  }
}

@media screen and (max-width: 600px) {
  .ftProject {
    .ftProject-content {
      gap: 35px;
    }
  }
}
</file>

<file path="src/styles/floatmail.scss">
@use './colors.scss';

.floating-mail {
  position: fixed;
  display: flex;
  align-items: center;
  bottom: -10px;
  left: 4em;
  transform-origin: 0%;
  transform: rotate(270deg);
  .floating-line {
    margin: 0 2em 0 0;
    width: 6em;
    height: 3px;
    background-color: colors.$green;
  }
  .mail {
    color: colors.$green;
    font-weight: 300;
    font-size: 18px;
    text-decoration: none;
  }
}
</file>

<file path="src/styles/footer.scss">
@use './colors.scss';

.footer {
  height: 5em;
  background-color: colors.$green;
  margin-bottom: 0;
  display: flex;
  place-content: center;
  place-items: center;
  
  p {
    color: colors.$mint;
    font-size: 1rem;
    text-align: center;
  }
  
  a {
    color: colors.$mint;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    
    &:hover {
      color: colors.$black;
      text-decoration: underline;
    }
  }
}
</file>

<file path="src/styles/mixins.scss">
@mixin no-scroll {
  overflow: visible;
}

@mixin hide-overflow {
  overflow: hidden;
}

@mixin scroll-y {
  overflow-x: hidden;
  overflow-y: auto;
}

@mixin flex-container($direction: row, $wrap: wrap, $gap: 1em) {
  display: flex;
  flex-direction: $direction;
  flex-wrap: $wrap;
  gap: $gap;
  overflow: visible;
}

@mixin grid-container($min-width: 250px, $gap: 1em) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
  overflow: visible;
}

@mixin smooth-transition($property: all, $duration: 0.3s, $easing: ease) {
  transition: #{$property} #{$duration} #{$easing};
}

@mixin center-content {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin responsive-font($mobile: 1rem, $tablet: 1.2rem, $desktop: 1.5rem) {
  font-size: $mobile;
  
  @media screen and (min-width: 768px) {
    font-size: $tablet;
  }
  
  @media screen and (min-width: 1024px) {
    font-size: $desktop;
  }
}
</file>

<file path="src/styles/mywork.scss">
@use './colors.scss';
@use './mixins.scss';

.mywork {
  min-height: auto;
  height: auto;
  @include mixins.flex-container(column, nowrap, 3em);
  align-items: center;
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 2em;
  
  .title {
    text-align: center;
    margin-bottom: 2em;
  }
  
  .mywork-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2em;
    width: 100%;
    max-width: 1000px;
    justify-items: center;
    align-items: start;
    @include mixins.no-scroll;
  }
}

@media screen and (max-width: 905px) {
  .mywork {
    padding: 1.5em;
    
    .mywork-container {
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 1.5em;
    }
  }
}

@media screen and (max-width: 600px) {
  .mywork {
    padding: 1em;
    
    .mywork-container {
      grid-template-columns: 1fr;
      gap: 1em;
    }
  }
}
</file>

<file path="src/types/index.ts">
export interface Project {
  id: number
  name: string
  description: string
  tags: string[]
  img: string
  githubRepo?: string
  demo?: string
  featured?: boolean
}

export interface PersonalInfo {
  hero: {
    greeting: string
    name: string
    description: string
    buttonText: string
  }
  aboutMeText1: string
  aboutMeText2: string
  aboutMeText3: string
  aboutMeText4: string
  aboutMeText5: string
  someTechnologiesTitle: string
  technologies: string[]
}

export interface NavigationLinks {
  name: string
  links: {
    aboutMe: string
    featuredProjects: string
    projects: string
    contact: string
    resume: string
  }
  resumeLink: string
}

export interface ContactInfo {
  contactTitle: string
  contactText: string
  contactButton: string
  socials: {
    behance: string
    github: string
    linkedin: string
    twitter: string
    instagram: string
    mail: string
    username: string
  }
}

export interface AnimationVariants {
  hidden: {
    opacity: number
    y?: number
    x?: number
    scale?: number
  }
  visible: {
    opacity: number
    y?: number
    x?: number
    scale?: number
    transition?: {
      duration?: number
      delay?: number
      ease?: string
      staggerChildren?: number
    }
  }
}

export interface BaseComponentProps {
  className?: string
  children?: React.ReactNode
}

export interface ProjectComponentProps extends BaseComponentProps {
  project: Project
  isReversed?: boolean
}
</file>

<file path="src/utils/helpers.ts">
import { useState, useEffect } from 'react'
import { APP_CONFIG } from '@/config/constants'

export const cn = (...classes: (string | undefined | null | false)[]): string => {
  return classes.filter(Boolean).join(' ')
}

export const getTransition = (duration: keyof typeof APP_CONFIG.ANIMATION.DURATION = 'NORMAL'): string => {
  return `all ${APP_CONFIG.ANIMATION.DURATION[duration]}s ${APP_CONFIG.ANIMATION.EASING}`
}

export const isMobile = (width: number): boolean => {
  return width < APP_CONFIG.NAVIGATION.MOBILE_BREAKPOINT
}

export const getImageUrl = (imageName: string): string => {
  return `${APP_CONFIG.PATHS.IMAGES}${imageName}`
}

export const isExternalUrl = (url: string): boolean => {
  return url.startsWith('http://') || url.startsWith('https://')
}

export const createSlug = (text: string): string => {
  return text
    .toLowerCase()
    .trim()
    .replace(/[^\w\s-]/g, '')
    .replace(/\s+/g, '-')
}

export const debounce = <T extends (...args: unknown[]) => void>(
  func: T,
  delay: number
): ((...args: Parameters<T>) => void) => {
  let timeoutId: NodeJS.Timeout
  return (...args: Parameters<T>) => {
    clearTimeout(timeoutId)
    timeoutId = setTimeout(() => func(...args), delay)
  }
}

export const useMediaQuery = (query: string): boolean => {
  const [matches, setMatches] = useState(false)

  useEffect(() => {
    const media = window.matchMedia(query)
    if (media.matches !== matches) {
      setMatches(media.matches)
    }
    
    const listener = () => setMatches(media.matches)
    media.addEventListener('change', listener)
    
    return () => media.removeEventListener('change', listener)
  }, [matches, query])

  return matches
}

export const useIsMobile = (): boolean => {
  return useMediaQuery(`(max-width: ${APP_CONFIG.NAVIGATION.MOBILE_BREAKPOINT}px)`)
}
</file>

<file path="src/animation.js">
export const ContainerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      duration: "0.2",
      type: "tween",
      when: "beforeChildren",
      staggerChildren: "0.1",
    },
  },
};
</file>

<file path="src/components/AboutMe.tsx">
'use client'

import React, { useEffect } from 'react'
import { useInView } from 'react-intersection-observer'
import { motion, useAnimation } from 'framer-motion'
import Image from 'next/image'
import '@/styles/aboutme.scss'
import { ContainerVariants } from '@/utils/animation'
import strings from '@/data/aboutme.json'

const AboutMe: React.FC = () => {
  const [ref, inView] = useInView()
  const animation = useAnimation()

  useEffect(() => {
    if (inView) {
      animation.start('visible')
    } else {
      animation.start('hidden')
    }
  }, [inView, animation])

  return (
    <motion.section className="aboutme" id="aboutme" ref={ref}>
      <motion.h1
        className="title"
        animate={animation}
        variants={ContainerVariants}
        initial="hidden"
      >
        {strings.aboutMeTitle}
      </motion.h1>
      <motion.div
        className="aboutme-container"
        animate={animation}
        variants={ContainerVariants}
        initial="hidden"
      >
        <motion.div className="aboutme-image" variants={ContainerVariants}>
          <Image 
            src="/images/sebas.webp" 
            alt="Sebastian Ruiz" 
            width={400}
            height={500}
            style={{ objectFit: 'cover' }}
          />
        </motion.div>
        <div className="aboutme-text">
          <motion.p variants={ContainerVariants} dangerouslySetInnerHTML={{ __html: strings.aboutMeText1 }} />
          <motion.p variants={ContainerVariants} dangerouslySetInnerHTML={{ __html: strings.aboutMeText2 }} />
          <motion.p variants={ContainerVariants} dangerouslySetInnerHTML={{ __html: strings.aboutMeText3 }} />
          <motion.p variants={ContainerVariants} dangerouslySetInnerHTML={{ __html: strings.aboutMeText4 }} />
          <motion.p variants={ContainerVariants} dangerouslySetInnerHTML={{ __html: strings.aboutMeText5 }} />
          
          <motion.h3 variants={ContainerVariants} className="technologies-title">
            {strings.someTechnologiesTitle}
          </motion.h3>
          <motion.div variants={ContainerVariants} className="technologies-grid">
            {strings.technologies.map((tech: string, index: number) => (
              <motion.span key={index} className="tech-badge">{tech}</motion.span>
            ))}
          </motion.div>
        </div>
      </motion.div>
    </motion.section>
  )
}

export default AboutMe
</file>

<file path="src/components/FeaturedProjects.tsx">
'use client'

import React, { useEffect } from 'react'
import { motion, useAnimation } from 'framer-motion'
import { useInView } from 'react-intersection-observer'
import '@/styles/featuredprojects.scss'
import { ContainerVariants } from '@/utils/animation'
import Projects from '@/data/projects.json'
import type { Project } from '@/types'
import FeaturedProject from './FeaturedProject'

const { projects }: { projects: Project[] } = Projects

const FeaturedProjects: React.FC = () => {
  const [ref, inView] = useInView()
  const animation = useAnimation()

  useEffect(() => {
    if (inView) {
      animation.start('visible')
    } else {
      animation.start('hidden')
    }
  }, [inView, animation])

  return (
    <section className="featuredProjects" id="featuredProjects" ref={ref}>
      <motion.h1
        className="title"
        variants={ContainerVariants}
        initial="hidden"
        animate={animation}
      >
        Featured Projects
      </motion.h1>
      <motion.div
        className="featuredProjects-container"
        variants={ContainerVariants}
        initial="hidden"
        animate={animation}
      >
        {projects.map((item, index) => {
          if (item.featured) {
            return <FeaturedProject {...item} key={item.id} index={index} />
          }
          return null
        })}
      </motion.div>
    </section>
  )
}

export default FeaturedProjects
</file>

<file path="src/components/FloatSocial.tsx">
'use client'

import React from 'react'
import '@/styles/floatsocial.scss'
import strings from '@/data/contact.json'

const FloatSocial: React.FC = () => {
  return (
    <div className="floating-social">
      <ul>
        <li>
          <a href={strings.socials.github} target="_blank" rel="noopener noreferrer">
            <svg
              width="30"
              height="30"
              viewBox="0 0 25 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g id="Github">
                <path
                  d="M12.5516 0.454773C5.92157 0.454773 0.551575 5.82477 0.551575 12.4548C0.551575 17.7648 3.98657 22.2498 8.75657 23.8398C9.35657 23.9448 9.58157 23.5848 9.58157 23.2698C9.58157 22.9848 9.56658 22.0398 9.56658 21.0348C6.55157 21.5898 5.77157 20.2998 5.53157 19.6248C5.39657 19.2798 4.81157 18.2148 4.30157 17.9298C3.88157 17.7048 3.28157 17.1498 4.28657 17.1348C5.23157 17.1198 5.90657 18.0048 6.13157 18.3648C7.21157 20.1798 8.93657 19.6698 9.62657 19.3548C9.73157 18.5748 10.0466 18.0498 10.3916 17.7498C7.72157 17.4498 4.93157 16.4148 4.93157 11.8248C4.93157 10.5198 5.39657 9.43977 6.16157 8.59977C6.04157 8.29977 5.62157 7.06977 6.28157 5.41977C6.28157 5.41977 7.28657 5.10477 9.58157 6.64977C10.5416 6.37977 11.5616 6.24477 12.5816 6.24477C13.6016 6.24477 14.6216 6.37977 15.5816 6.64977C17.8766 5.08977 18.8816 5.41977 18.8816 5.41977C19.5416 7.06977 19.1216 8.29977 19.0016 8.59977C19.7666 9.43977 20.2316 10.5048 20.2316 11.8248C20.2316 16.4298 17.4266 17.4498 14.7566 17.7498C15.1916 18.1248 15.5666 18.8448 15.5666 19.9698C15.5666 21.5748 15.5516 22.8648 15.5516 23.2698C15.5516 23.5848 15.7766 23.9598 16.3766 23.8398C18.7588 23.0355 20.8288 21.5045 22.2952 19.4621C23.7617 17.4198 24.5509 14.9691 24.5516 12.4548C24.5516 5.82477 19.1816 0.454773 12.5516 0.454773Z"
                  fill="currentColor"
                />
              </g>
            </svg>
          </a>
        </li>
        <li>
          <a href={strings.socials.twitter} target="_blank" rel="noopener noreferrer">
            <svg
              width="30"
              height="30"
              viewBox="0 0 23 19"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g id="Twitter">
                <path
                  d="M22.869 2.41503C22.034 2.78503 21.137 3.03503 20.194 3.14803C21.167 2.56582 21.8949 1.64949 22.242 0.570028C21.3278 1.11302 20.3273 1.49522 19.284 1.70003C18.5824 0.950893 17.653 0.454354 16.6403 0.287502C15.6276 0.12065 14.5881 0.29282 13.6832 0.777281C12.7784 1.26174 12.0588 2.03139 11.6361 2.96673C11.2135 3.90207 11.1115 4.95078 11.346 5.95003C9.49367 5.85702 7.68161 5.37558 6.02741 4.53693C4.37321 3.69829 2.91383 2.52119 1.74399 1.08203C1.34399 1.77203 1.11399 2.57203 1.11399 3.42403C1.11354 4.19102 1.30242 4.94627 1.66387 5.62276C2.02531 6.29925 2.54815 6.87607 3.18599 7.30203C2.44626 7.27849 1.72286 7.07861 1.07599 6.71903V6.77903C1.07591 7.85477 1.44802 8.89741 2.12917 9.73002C2.81032 10.5626 3.75856 11.134 4.81299 11.347C4.12677 11.5327 3.40732 11.5601 2.70899 11.427C3.00648 12.3526 3.58598 13.1621 4.36635 13.742C5.14673 14.3219 6.0889 14.6432 7.06099 14.661C5.41082 15.9564 3.37287 16.6591 1.27499 16.656C0.903368 16.6561 0.532063 16.6344 0.162987 16.591C2.29246 17.9602 4.77133 18.6868 7.30299 18.684C15.873 18.684 20.558 11.586 20.558 5.43003C20.558 5.23003 20.553 5.02803 20.544 4.82803C21.4553 4.169 22.2419 3.35292 22.867 2.41803L22.869 2.41503V2.41503Z"
                  fill="currentColor"
                />
              </g>
            </svg>
          </a>
        </li>
        <li>
          <a href={strings.socials.linkedin} target="_blank" rel="noopener noreferrer">
            <svg
              width="30"
              height="30"
              viewBox="0 0 22 22"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g id="LinkedIn">
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M2.7206e-07 1.838C2.7206e-07 1.35053 0.193646 0.883032 0.538338 0.53834C0.88303 0.193648 1.35053 2.45031e-06 1.838 2.45031e-06H20.16C20.4016 -0.000392101 20.6409 0.0468654 20.8641 0.139069C21.0874 0.231273 21.2903 0.366612 21.4612 0.537339C21.6322 0.708065 21.7677 0.910826 21.8602 1.13401C21.9526 1.3572 22.0001 1.59643 22 1.838V20.16C22.0003 20.4016 21.9529 20.6409 21.8606 20.8642C21.7683 21.0875 21.6328 21.2904 21.462 21.4613C21.2912 21.6322 21.0884 21.7678 20.8651 21.8602C20.6419 21.9526 20.4026 22.0001 20.161 22H1.838C1.59655 22 1.35746 21.9524 1.1344 21.86C0.911335 21.7676 0.708671 21.6321 0.537984 21.4613C0.367297 21.2905 0.231932 21.0878 0.139623 20.8647C0.0473133 20.6416 -0.000131096 20.4025 2.7206e-07 20.161V1.838ZM8.708 8.388H11.687V9.884C12.117 9.024 13.217 8.25 14.87 8.25C18.039 8.25 18.79 9.963 18.79 13.106V18.928H15.583V13.822C15.583 12.032 15.153 11.022 14.061 11.022C12.546 11.022 11.916 12.111 11.916 13.822V18.928H8.708V8.388ZM3.208 18.791H6.416V8.25H3.208V18.79V18.791ZM6.875 4.812C6.88105 5.08667 6.83217 5.35979 6.73124 5.61532C6.63031 5.87084 6.47935 6.10364 6.28723 6.30003C6.09511 6.49643 5.8657 6.65248 5.61246 6.75901C5.35921 6.86554 5.08724 6.92042 4.8125 6.92042C4.53776 6.92042 4.26579 6.86554 4.01255 6.75901C3.7593 6.65248 3.52989 6.49643 3.33777 6.30003C3.14565 6.10364 2.99469 5.87084 2.89376 5.61532C2.79283 5.35979 2.74395 5.08667 2.75 4.812C2.76187 4.27286 2.98439 3.75979 3.36989 3.38269C3.75539 3.00558 4.27322 2.79442 4.8125 2.79442C5.35178 2.79442 5.86961 3.00558 6.25512 3.38269C6.64062 3.75979 6.86313 4.27286 6.875 4.812V4.812Z"
                  fill="currentColor"
                />
              </g>
            </svg>
          </a>
        </li>
        <li>
          <a href={strings.socials.instagram} target="_blank" rel="noopener noreferrer">
            <svg
              width="30"
              height="30"
              viewBox="0 0 22 22"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <g id="Instagram">
                <path
                  d="M6.465 0.066C7.638 0.012 8.012 0 11 0C13.988 0 14.362 0.013 15.534 0.066C16.706 0.119 17.506 0.306 18.206 0.577C18.939 0.854 19.604 1.287 20.154 1.847C20.714 2.396 21.146 3.06 21.422 3.794C21.694 4.494 21.88 5.294 21.934 6.464C21.988 7.639 22 8.013 22 11C22 13.988 21.987 14.362 21.934 15.535C21.881 16.705 21.694 17.505 21.422 18.205C21.146 18.9391 20.7133 19.6042 20.154 20.154C19.604 20.714 18.939 21.146 18.206 21.422C17.506 21.694 16.706 21.88 15.536 21.934C14.362 21.988 13.988 22 11 22C8.012 22 7.638 21.987 6.465 21.934C5.295 21.881 4.495 21.694 3.795 21.422C3.06092 21.146 2.39582 20.7133 1.846 20.154C1.28638 19.6047 0.853315 18.9399 0.577 18.206C0.306 17.506 0.12 16.706 0.066 15.536C0.012 14.361 0 13.987 0 11C0 8.012 0.013 7.638 0.066 6.466C0.119 5.294 0.306 4.494 0.577 3.794C0.853723 3.06008 1.28712 2.39531 1.847 1.846C2.39604 1.2865 3.06047 0.853443 3.794 0.577C4.494 0.306 5.294 0.12 6.464 0.066H6.465ZM15.445 2.046C14.285 1.993 13.937 1.982 11 1.982C8.063 1.982 7.715 1.993 6.555 2.046C5.482 2.095 4.9 2.274 4.512 2.425C3.999 2.625 3.632 2.862 3.247 3.247C2.88205 3.60205 2.60118 4.03428 2.425 4.512C2.274 4.9 2.095 5.482 2.046 6.555C1.993 7.715 1.982 8.063 1.982 11C1.982 13.937 1.993 14.285 2.046 15.445C2.095 16.518 2.274 17.1 2.425 17.488C2.601 17.965 2.882 18.398 3.247 18.753C3.602 19.118 4.035 19.399 4.512 19.575C4.9 19.726 5.482 19.905 6.555 19.954C7.715 20.007 8.062 20.018 11 20.018C13.938 20.018 14.285 20.007 15.445 19.954C16.518 19.905 17.1 19.726 17.488 19.575C18.001 19.375 18.368 19.138 18.753 18.753C19.118 18.398 19.399 17.965 19.575 17.488C19.726 17.1 19.905 16.518 19.954 15.445C20.007 14.285 20.018 13.937 20.018 11C20.018 8.063 20.007 7.715 19.954 6.555C19.905 5.482 19.726 4.9 19.575 4.512C19.375 3.999 19.138 3.632 18.753 3.247C18.3979 2.88207 17.9657 2.60121 17.488 2.425C17.1 2.274 16.518 2.095 15.445 2.046V2.046ZM9.595 14.391C10.3797 14.7176 11.2534 14.7617 12.0669 14.5157C12.8805 14.2697 13.5834 13.7489 14.0556 13.0422C14.5278 12.3356 14.7401 11.4869 14.656 10.6411C14.572 9.79534 14.197 9.00497 13.595 8.405C13.2112 8.02148 12.7472 7.72781 12.2363 7.54515C11.7255 7.36248 11.1804 7.29536 10.6405 7.34862C10.1006 7.40187 9.57915 7.57418 9.1138 7.85313C8.64846 8.13208 8.25074 8.51074 7.9493 8.96185C7.64786 9.41296 7.45019 9.92529 7.37052 10.462C7.29084 10.9986 7.33115 11.5463 7.48854 12.0655C7.64593 12.5847 7.91648 13.0626 8.28072 13.4647C8.64496 13.8668 9.09382 14.1832 9.595 14.391ZM7.002 7.002C7.52702 6.47698 8.15032 6.0605 8.8363 5.77636C9.52228 5.49222 10.2575 5.34597 11 5.34597C11.7425 5.34597 12.4777 5.49222 13.1637 5.77636C13.8497 6.0605 14.473 6.47698 14.998 7.002C15.523 7.52702 15.9395 8.15032 16.2236 8.8363C16.5078 9.52228 16.654 10.2575 16.654 11C16.654 11.7425 16.5078 12.4777 16.2236 13.1637C15.9395 13.8497 15.523 14.473 14.998 14.998C13.9377 16.0583 12.4995 16.654 11 16.654C9.50046 16.654 8.06234 16.0583 7.002 14.998C5.94166 13.9377 5.34597 12.4995 5.34597 11C5.34597 9.50046 5.94166 8.06234 7.002 7.002V7.002ZM17.908 6.188C18.0381 6.06527 18.1423 5.91768 18.2143 5.75397C18.2863 5.59027 18.3248 5.41377 18.3274 5.23493C18.33 5.05609 18.2967 4.87855 18.2295 4.71281C18.1622 4.54707 18.0624 4.39651 17.936 4.27004C17.8095 4.14357 17.6589 4.04376 17.4932 3.97652C17.3275 3.90928 17.1499 3.87598 16.9711 3.87858C16.7922 3.88119 16.6157 3.91965 16.452 3.9917C16.2883 4.06374 16.1407 4.1679 16.018 4.298C15.7793 4.55103 15.6486 4.88712 15.6537 5.23493C15.6588 5.58274 15.7992 5.91488 16.0452 6.16084C16.2911 6.40681 16.6233 6.54723 16.9711 6.5523C17.3189 6.55737 17.655 6.42669 17.908 6.188V6.188Z"
                  fill="currentColor"
                />
              </g>
            </svg>
          </a>
        </li>
      </ul>
      <div className="floating-line"></div>
    </div>
  )
}

export default FloatSocial
</file>

<file path="src/components/Footer.tsx">
'use client'

import React from 'react'
import '@/styles/footer.scss'

const Footer: React.FC = () => {
  return (
    <footer className="footer">
      <p>
        Made with üíõ by{' '}
        <a 
          href="https://github.com/imsebarz" 
          target="_blank" 
          rel="noopener noreferrer"
        >
          @imsebarz
        </a>
      </p>
    </footer>
  )
}

export default Footer
</file>

<file path="src/components/Hero.tsx">
'use client'

import React, { useEffect } from 'react'
import { motion } from 'framer-motion'
import Image from 'next/image'
import '@/styles/hero.scss'
import { ContainerVariants } from '@/utils/animation'
import strings from '@/data/aboutme.json'

const Hero: React.FC = () => {
  useEffect(() => {
    const hero = document.querySelector('.hero') as HTMLElement
    function handleResize() {
      if (hero) {
        console.log(hero.clientHeight)
      }
    }
    setTimeout(() => {
      handleResize()
    }, 0)
    window.addEventListener('resize', handleResize)
    
    return () => {
      window.removeEventListener('resize', handleResize)
    }
  }, [])

  return (
    <section className="hero">
      <Image 
        className="hero-bg" 
        src="/images/wave-bg.svg" 
        alt="Sebarz Background" 
        fill
        style={{ objectFit: 'cover' }}
        priority
      />
      <motion.div
        className="hero-info"
        variants={ContainerVariants}
        initial="hidden"
        animate="visible"
      >
        <motion.p variants={ContainerVariants}>
          {strings.hero.greeting}
        </motion.p>
        <motion.h1 variants={ContainerVariants}>
          {strings.hero.name}
        </motion.h1>
        <motion.h2 
          variants={ContainerVariants} 
          dangerouslySetInnerHTML={{ __html: strings.hero.description }} 
        />
        <motion.a href="#featuredProjects">
          <motion.button variants={ContainerVariants}>
            {strings.hero.buttonText}
          </motion.button>
        </motion.a>
      </motion.div>
      <motion.div
        variants={ContainerVariants}
        initial="hidden"
        animate="visible"
      >
        <Image
          src="/images/hero.webp"
          id="hero-img"
          alt="Sebarz Profile Photo"
          width={500}
          height={600}
          priority
        />
      </motion.div>
    </section>
  )
}

export default Hero
</file>

<file path="src/components/MyWork.tsx">
'use client'

import React from 'react'
import '@/styles/mywork.scss'
import Projects from '@/data/projects.json'
import type { Project as ProjectType } from '@/types'
import Project from './Project'

const { projects }: { projects: ProjectType[] } = Projects

const MyWork: React.FC = () => {
  return (
    <section className="mywork" id="mywork">
      <h1 className="title">Some other work</h1>
      <div className="mywork-container">
        {projects.map((item) => {
          if (!item.featured) {
            return <Project {...item} key={item.id} />
          }
          return null
        })}
      </div>
    </section>
  )
}

export default MyWork
</file>

<file path="src/styles/aboutme.scss">
@use './colors.scss';

.aboutme {
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 90vh;
  max-width: 1200px;
  margin: 0 auto;
  padding: 4em 2em;
  height: auto;
  gap: 3em;

  .title {
    text-align: center;
    font-size: 3rem;
    color: colors.$black;
    border-bottom: 2px dotted colors.$green;
    padding-bottom: 0.5em;
    margin-bottom: 1em;
    font-family: var(--font-recoleta);
  }

  .aboutme-container {
    display: flex;
    width: 100%;
    max-width: 1000px;
    gap: 4em;
    align-items: flex-start;
    
    .aboutme-image {
      flex: 0 0 auto;
      width: 400px;
      
      img {
        width: 100%;
        height: auto;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      }
    }
    
    .aboutme-text {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 1.5em;
      
      p {
        font-size: 1rem;
        line-height: 1.6;
        color: colors.$black;
        text-align: justify;
        margin: 0;
        
        a {
          text-decoration: none;
          color: colors.$green;
          border-bottom: 1px dotted;
          font-weight: 600;
        }
      }
      
      .technologies-title {
        font-size: 1.5rem;
        color: colors.$black;
        margin: 1em 0 0.5em 0;
        font-weight: 600;
        font-family: var(--font-recoleta);
      }
      
      .technologies-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 0.8em;
        margin-top: 0.5em;
        
        .tech-badge {
          display: inline-block;
          position: relative;
          padding: 0.4em 0.3em 0.6em;
          background: transparent;
          color: colors.$black;
          font-size: 0.9rem;
          font-weight: 500;
          white-space: nowrap;
          
          &::after {
            content: '';
            position: absolute;
            bottom: 0.2em;
            left: 50%;
            transform: translateX(-50%);
            width: calc(100% - 0.6em);
            height: 1px;
            background: repeating-linear-gradient(
              to right,
              colors.$green 0,
              colors.$green 2px,
              transparent 2px,
              transparent 6px
            );
          }
        }
      }
    }
  }
}

@media screen and (max-width: 900px) {
  .aboutme {
    padding: 2em 1em;
    gap: 2em;
    
    .title {
      font-size: 2.5rem;
    }
    
    .aboutme-container {
      flex-direction: column;
      gap: 2em;
      align-items: center;
      text-align: center;
      
      .aboutme-image {
        width: 300px;
        
        img {
          width: 100%;
        }
      }
      
      .aboutme-text {
        .technologies-grid {
          justify-content: center;
        }
      }
    }
  }
}

@media screen and (max-width: 600px) {
  .aboutme {
    .title {
      font-size: 2rem;
    }
    
    .aboutme-container {
      .aboutme-image {
        width: 250px;
      }
      
      .aboutme-text {
        p {
          text-align: left;
        }
        
        .technologies-grid {
          .tech-badge {
            font-size: 0.8rem;
            padding: 0.3em 0.2em 0.5em;
            
            &::after {
              width: calc(100% - 0.4em);
            }
          }
        }
      }
    }
  }
}
</file>

<file path="src/styles/floatsocial.scss">
@use './colors.scss';

.floating-social {
  position: fixed;
  display: flex;
  flex-direction: column;
  align-items: center;
  bottom: 0;
  right: 3em;
  ul {
    list-style: none;
    li {
      margin: 1.2em 0;
      
      a {
        display: block;
        color: colors.$green;
        transition: all 0.3s ease;
        
        &:hover {
          color: colors.$pepper;
          transform: translateY(-3px);
        }
        
        svg {
          filter: brightness(1.01);
          height: 35px;
          width: auto;
          transition: inherit;
        }
      }
    }
    li::before {
      display: none;
    }
  }
  .floating-line {
    margin: 1em 0 0 0;
    width: 3px;
    height: 6em;
    background-color: colors.$green;
  }
}
</file>

<file path="src/utils/animation.ts">
import { Variants } from 'framer-motion'
import { APP_CONFIG } from '@/config/constants'

const ANIMATION_CONFIG = {
  duration: APP_CONFIG.ANIMATION.DURATION.NORMAL,
  ease: APP_CONFIG.ANIMATION.EASING,
  staggerChildren: 0.1,
  offset: 50,
}

export const ContainerVariants: Variants = {
  hidden: {
    opacity: 0,
    y: ANIMATION_CONFIG.offset,
  },
  visible: {
    opacity: 1,
    y: 0,
    transition: {
      duration: ANIMATION_CONFIG.duration,
      type: 'tween',
      when: 'beforeChildren',
      staggerChildren: ANIMATION_CONFIG.staggerChildren,
    },
  },
}

export const FadeInVariants: Variants = {
  hidden: { 
    opacity: 0 
  },
  visible: { 
    opacity: 1,
    transition: {
      duration: ANIMATION_CONFIG.duration,
      type: 'tween',
    },
  },
}

export const SlideUpVariants: Variants = {
  hidden: { 
    opacity: 0, 
    y: ANIMATION_CONFIG.offset 
  },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: {
      duration: ANIMATION_CONFIG.duration,
      type: 'tween',
    },
  },
}

export const SlideInLeftVariants: Variants = {
  hidden: { 
    opacity: 0, 
    x: -ANIMATION_CONFIG.offset 
  },
  visible: { 
    opacity: 1, 
    x: 0,
    transition: {
      duration: ANIMATION_CONFIG.duration,
      type: 'tween',
    },
  },
}

export const SlideInRightVariants: Variants = {
  hidden: { 
    opacity: 0, 
    x: ANIMATION_CONFIG.offset 
  },
  visible: { 
    opacity: 1, 
    x: 0,
    transition: {
      duration: ANIMATION_CONFIG.duration,
      type: 'tween',
    },
  },
}

export const ScaleVariants: Variants = {
  hidden: { 
    opacity: 0, 
    scale: 0.8 
  },
  visible: { 
    opacity: 1, 
    scale: 1,
    transition: {
      duration: ANIMATION_CONFIG.duration,
      type: 'tween',
    },
  },
}

export const HeroVariants: Variants = {
  hidden: { 
    opacity: 0, 
    y: ANIMATION_CONFIG.offset * 2 
  },
  visible: { 
    opacity: 1, 
    y: 0,
    transition: {
      duration: ANIMATION_CONFIG.duration * 2,
      type: 'tween',
      when: 'beforeChildren',
      staggerChildren: ANIMATION_CONFIG.staggerChildren * 2,
    },
  },
}

export const ProjectCardVariants: Variants = {
  hidden: { 
    opacity: 0, 
    y: ANIMATION_CONFIG.offset,
    scale: 0.95
  },
  visible: { 
    opacity: 1, 
    y: 0,
    scale: 1,
    transition: {
      duration: ANIMATION_CONFIG.duration,
      type: 'tween',
    },
  },
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import localFont from 'next/font/local'
import '../styles/globals.scss'

const inter = Inter({ subsets: ['latin'] })

const recoleta = localFont({
  src: '../../public/fonts/Recoleta.otf',
  variable: '--font-recoleta',
  display: 'swap',
})

export const metadata: Metadata = {
  title: 'Sebarz | Web Developer',
  description: 'Sebastian Ruiz - Full Stack Web Developer Portfolio',
  keywords: ['web developer', 'full stack', 'react', 'javascript', 'portfolio'],
  authors: [{ name: 'Sebastian Ruiz' }],
  creator: 'Sebastian Ruiz',
  metadataBase: new URL('https://imsebarz.vercel.app'),
  openGraph: {
    type: 'website',
    locale: 'en_US',
    url: 'https://imsebarz.vercel.app',
    title: 'Sebarz | Web Developer',
    description: 'Sebastian Ruiz - Full Stack Web Developer Portfolio',
    siteName: 'Sebarz Portfolio',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'Sebarz | Web Developer',
    description: 'Sebastian Ruiz - Full Stack Web Developer Portfolio',
  },
  icons: {
    icon: [
      { url: '/favicon-16x16.png', sizes: '16x16', type: 'image/png' },
      { url: '/favicon-32x32.png', sizes: '32x32', type: 'image/png' },
    ],
    apple: [
      { url: '/apple-touch-icon.png', sizes: '180x180', type: 'image/png' },
    ],
    other: [
      { url: '/android-chrome-192x192.png', sizes: '192x192', type: 'image/png' },
      { url: '/android-chrome-512x512.png', sizes: '512x512', type: 'image/png' },
    ],
  },
  manifest: '/site.webmanifest',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={`${inter.className} ${recoleta.variable}`}>
        {children}
      </body>
    </html>
  )
}
</file>

<file path="src/components/FeaturedProject.tsx">
'use client'

import { motion, useAnimation } from 'framer-motion'
import Image from 'next/image'
import React, { useEffect } from 'react'
import { useInView } from 'react-intersection-observer'
import '@/styles/featuredproject.scss'
import { ContainerVariants } from '@/utils/animation'
import type { Project } from '@/types'

interface FeaturedProjectProps extends Project {
  index: number
}

const FeaturedProject: React.FC<FeaturedProjectProps> = ({
  name,
  description,
  tags,
  githubRepo,
  demo,
  img,
  index,
}) => {
  const [ref, inView] = useInView()
  const animation = useAnimation()

  useEffect(() => {
    if (inView) {
      animation.start('visible')
    } else {
      animation.start('hidden')
    }
  }, [inView, animation])

  const actualDirection = index % 2 === 0 ? 'left' : 'right'

  return (
    <motion.div
      className={`ftProject ${actualDirection}`}
      ref={ref}
      variants={ContainerVariants}
      initial="hidden"
      animate={animation}
    >
      <div className="ftProject-image">
        <a href={demo} target="_blank" rel="noopener noreferrer">
          <Image 
            src={`/images/${img}`} 
            alt={name}
            width={600}
            height={400}
            style={{ objectFit: 'cover' }}
          />
        </a>
      </div>
      <div className="ftProject-content">
        <h1>{name}</h1>
        <div className="desc">
          <p>{description}</p>
        </div>
        <ul className="tags">
          {tags.map((tag, tagIndex) => (
            <li key={tagIndex}>{tag}</li>
          ))}
        </ul>
        <div className="ftProject-links">
          {githubRepo && (
            <a href={githubRepo} target="_blank" rel="noopener noreferrer">
              <svg
                width="28"
                height="28"
                viewBox="0 0 25 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g id="Github">
                  <path
                    d="M12.5516 0.454773C5.92157 0.454773 0.551575 5.82477 0.551575 12.4548C0.551575 17.7648 3.98657 22.2498 8.75657 23.8398C9.35657 23.9448 9.58157 23.5848 9.58157 23.2698C9.58157 22.9848 9.56658 22.0398 9.56658 21.0348C6.55157 21.5898 5.77157 20.2998 5.53157 19.6248C5.39657 19.2798 4.81157 18.2148 4.30157 17.9298C3.88157 17.7048 3.28157 17.1498 4.28657 17.1348C5.23157 17.1198 5.90657 18.0048 6.13157 18.3648C7.21157 20.1798 8.93657 19.6698 9.62657 19.3548C9.73157 18.5748 10.0466 18.0498 10.3916 17.7498C7.72157 17.4498 4.93157 16.4148 4.93157 11.8248C4.93157 10.5198 5.39657 9.43977 6.16157 8.59977C6.04157 8.29977 5.62157 7.06977 6.28157 5.41977C6.28157 5.41977 7.28657 5.10477 9.58157 6.64977C10.5416 6.37977 11.5616 6.24477 12.5816 6.24477C13.6016 6.24477 14.6216 6.37977 15.5816 6.64977C17.8766 5.08977 18.8816 5.41977 18.8816 5.41977C19.5416 7.06977 19.1216 8.29977 19.0016 8.59977C19.7666 9.43977 20.2316 10.5048 20.2316 11.8248C20.2316 16.4298 17.4266 17.4498 14.7566 17.7498C15.1916 18.1248 15.5666 18.8448 15.5666 19.9698C15.5666 21.5748 15.5516 22.8648 15.5516 23.2698C15.5516 23.5848 15.7766 23.9598 16.3766 23.8398C18.7588 23.0355 20.8288 21.5045 22.2952 19.4621C23.7617 17.4198 24.5509 14.9691 24.5516 12.4548C24.5516 5.82477 19.1816 0.454773 12.5516 0.454773Z"
                    fill="currentColor"
                  />
                </g>
              </svg>
            </a>
          )}
          {demo && (
            <a href={demo} target="_blank" rel="noopener noreferrer">
              <svg
                width="28"
                height="28"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M18 13V19C18 19.5304 17.7893 20.0391 17.4142 20.4142C17.0391 20.7893 16.5304 21 16 21H5C4.46957 21 3.96086 20.7893 3.58579 20.4142C3.21071 20.0391 3 19.5304 3 19V8C3 7.46957 3.21071 6.96086 3.58579 6.58579C3.96086 6.21071 4.46957 6 5 6H11"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M15 3H21V9"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M10 14L21 3"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </a>
          )}
        </div>
      </div>
    </motion.div>
  )
}

export default FeaturedProject
</file>

<file path="src/components/Project.tsx">
'use client'

import { motion, useAnimation } from 'framer-motion'
import React, { useEffect } from 'react'
import { useInView } from 'react-intersection-observer'
import '@/styles/project.scss'
import { ContainerVariants } from '@/utils/animation'
import type { Project as ProjectType } from '@/types'

const Project: React.FC<ProjectType> = ({ name, description, tags, githubRepo, demo }) => {
  const [ref, inView] = useInView()
  const animation = useAnimation()

  useEffect(() => {
    if (inView) {
      animation.start('visible')
    } else {
      animation.start('hidden')
    }
  }, [inView, animation])

  return (
    <motion.div
      className="project"
      ref={ref}
      variants={ContainerVariants}
      initial="hidden"
      animate={animation}
    >
      <div className="project-header">
        <svg
          width="36"
          height="32"
          id="folder"
          viewBox="0 0 23 21"
          fill="#04a175"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M21.5928 17.8992V7.89919C21.5928 7.36875 21.3821 6.86004 21.007 6.48497C20.6319 6.1099 20.1232 5.89919 19.5928 5.89919H12.8288C12.4573 5.89917 12.0931 5.79569 11.7771 5.60034C11.4612 5.40499 11.2058 5.1255 11.0398 4.79319L10.1458 3.00519C9.97964 2.67272 9.72415 2.39312 9.40797 2.19776C9.0918 2.00241 8.72744 1.89901 8.35577 1.89919H3.59277C3.06234 1.89919 2.55363 2.1099 2.17856 2.48497C1.80349 2.86004 1.59277 3.36875 1.59277 3.89919V17.8992C1.59277 18.4296 1.80349 18.9383 2.17856 19.3134C2.55363 19.6885 3.06234 19.8992 3.59277 19.8992H19.5928C20.1232 19.8992 20.6319 19.6885 21.007 19.3134C21.3821 18.9383 21.5928 18.4296 21.5928 17.8992Z"
            stroke="black"
            strokeWidth="1.2"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
        </svg>
        <div className="project-links">
          {githubRepo && (
            <a href={githubRepo} target="_blank" rel="noopener noreferrer">
              <svg
                width="28"
                height="28"
                viewBox="0 0 25 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g id="Github">
                  <path
                    d="M12.5516 0.454773C5.92157 0.454773 0.551575 5.82477 0.551575 12.4548C0.551575 17.7648 3.98657 22.2498 8.75657 23.8398C9.35657 23.9448 9.58157 23.5848 9.58157 23.2698C9.58157 22.9848 9.56658 22.0398 9.56658 21.0348C6.55157 21.5898 5.77157 20.2998 5.53157 19.6248C5.39657 19.2798 4.81157 18.2148 4.30157 17.9298C3.88157 17.7048 3.28157 17.1498 4.28657 17.1348C5.23157 17.1198 5.90657 18.0048 6.13157 18.3648C7.21157 20.1798 8.93657 19.6698 9.62657 19.3548C9.73157 18.5748 10.0466 18.0498 10.3916 17.7498C7.72157 17.4498 4.93157 16.4148 4.93157 11.8248C4.93157 10.5198 5.39657 9.43977 6.16157 8.59977C6.04157 8.29977 5.62157 7.06977 6.28157 5.41977C6.28157 5.41977 7.28657 5.10477 9.58157 6.64977C10.5416 6.37977 11.5616 6.24477 12.5816 6.24477C13.6016 6.24477 14.6216 6.37977 15.5816 6.64977C17.8766 5.08977 18.8816 5.41977 18.8816 5.41977C19.5416 7.06977 19.1216 8.29977 19.0016 8.59977C19.7666 9.43977 20.2316 10.5048 20.2316 11.8248C20.2316 16.4298 17.4266 17.4498 14.7566 17.7498C15.1916 18.1248 15.5666 18.8448 15.5666 19.9698C15.5666 21.5748 15.5516 22.8648 15.5516 23.2698C15.5516 23.5848 15.7766 23.9598 16.3766 23.8398C18.7588 23.0355 20.8288 21.5045 22.2952 19.4621C23.7617 17.4198 24.5509 14.9691 24.5516 12.4548C24.5516 5.82477 19.1816 0.454773 12.5516 0.454773Z"
                    fill="currentColor"
                  />
                </g>
              </svg>
            </a>
          )}
          {demo && (
            <a href={demo} target="_blank" rel="noopener noreferrer">
              <svg
                width="28"
                height="28"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M18 13V19C18 19.5304 17.7893 20.0391 17.4142 20.4142C17.0391 20.7893 16.5304 21 16 21H5C4.46957 21 3.96086 20.7893 3.58579 20.4142C3.21071 20.0391 3 19.5304 3 19V8C3 7.46957 3.21071 6.96086 3.58579 6.58579C3.96086 6.21071 4.46957 6 5 6H11"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M15 3H21V9"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
                <path
                  d="M10 14L21 3"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                />
              </svg>
            </a>
          )}
        </div>
      </div>
      <h3 className="project-title">{name}</h3>
      <p className="project-description">{description}</p>
      <ul className="project-tags">
        {tags.map((tag, index) => (
          <li key={index}>{tag}</li>
        ))}
      </ul>
    </motion.div>
  )
}

export default Project
</file>

<file path="src/styles/hero.scss">
@use './colors.scss';

.hero {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  min-height: 100vh;
  max-width: 1200px;
  color: colors.$mint;
  height: auto;
  margin-top: 3em;
  margin-bottom: 0;
  gap: 2em;
  .hero-bg {
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0px;
    top:0;
    object-fit: cover;
    z-index: -1;
  }
  .hero-info {
    display: flex;
    flex-direction: column;
    margin-right: 3em;
    width: 30%;
    min-width: 250px;
    flex-grow: 1;
    gap: 10px;

    button {
      width: 15em;
      margin-top: 2em;
      height: 4em;
      color: colors.$mint;
      background-color: colors.$green;
      border: 1.5px solid colors.$mint;
      border-radius: 10px;
      font-weight: 500;
      font-family: "Roboto";
    }

    button:hover {
      background-color: colors.$mint;
      border-color: colors.$green;
      color: colors.$green;
      transition: background 0.3s ease;
    }

    h1 {
      font-size: 70px;
      color: colors.$black;
      font-weight: 900;
      font-family: var(--font-recoleta);
    }
    h2 {
      font-size: 35px;
      color: colors.$pepper;
      font-family: var(--font-recoleta);
    }
    p {
      font-size: 30px;
      color: colors.$pepper;
    }

    span {
      font-weight: 900;
    }
  }
  #hero-img {
    width: 90%;
    min-width: 240px;
    height: auto;
  }
}

@media screen and (max-width: 905px) {
  .hero {
    flex-direction: column-reverse;
    justify-content: center;
    margin-top: 7em;
    .hero-info {
      width: 100%;
      place-items: center;
      text-align: center;
      margin: 0px auto;
      max-height: fit-content;
    }
    img {
      width: 50%;
      height: auto;
    }
    .hero-bg{
      height: 1000px;
    }
  }
}
</file>

<file path="src/styles/nav.scss">
@use "./colors.scss";

.nav {
  position: fixed;
  display: flex;
  width: 100%;
  align-items: center;
  justify-content: space-between;
  padding: 0.8em 10em;
  background-color: rgba(colors.$black, 0.8);
  color: colors.$mint;
  font-weight: 500;
  font-size: 17px;
  z-index: 11;
  .nav-links {
    width: 50%;
    opacity: 1;
    list-style: none;
    display: flex;
    justify-content: space-between;
    align-items: center;
    li {
      a {
        color: colors.$mint;
        text-decoration: none;
      }
    }
    li::before {
      display: none;
    }
  }
  a {
    text-decoration: none;
  }
  h1 {
    color: colors.$mint;
  }
  button {
    width: 10em;
    height: 3.5em;
    color: colors.$green;
    background-color: colors.$mint;
    border: 1.5px dotted colors.$green;
    border-radius: 10px;
    font-weight: 500;
    font-family: "Roboto";
  }

  button:hover {
    cursor: pointer;
  }

  .hamburger {
    display: none;
  }

  .hamburger.closed {
    svg {
      #top,
      #middle,
      #bottom {
        transform: rotate(0deg) translate(0px, 0px);
        transition: all 0.1s ease;
      }
      path {
        fill: colors.$mint;
      }
    }
  }

  .hamburger.open {
    svg {
      #top {
        transform: rotate(45deg) translate(15%, -20%);
        transition: all 0.1s ease;
        transform-origin: top left;
      }
      #middle {
        transition: all 0.1s ease;
        opacity: 0;
      }
      #bottom {
        transition: all 0.1s ease;
        transform-origin: top left;
        transform: rotate(-45deg) translate(-45%, -15%);
      }
    }
  }

  .sidebar {
    position: fixed;
    height: 100vh;
    display: flex;
    align-items: center;
    width: 65vw;
    min-width: 250px;
    padding: 2em;
    top: 0;
    right: -100%;
    background: colors.$green;
    z-index: 10;
    transition: all 0.2s ease;
    .aside-links {
      place-content: center;
      display: flex;
      flex-direction: column;
      height: 60%;
      width: 100%;
      justify-content: space-between;
      align-items: center;
      li {
        list-style: none;
        a {
          color: colors.$mint;
          text-decoration: none;
        }
      }
      li::before {
        display: none;
      }
    }
  }
}

@media screen and (max-width: 900px) {
  .nav {
    padding: 0.8em 2em;
    .nav-links {
      display: none;
    }
    .hamburger {
      display: flex;
      place-items: center;
      z-index: 20;
      svg {
        height: 25px;
        width: auto;
      }
    }
    .sidebar {
      .aside-links {
        font-size: 24px;
      }
      button {
        font-size: 22px;
      }
      .aside-social {
        display: flex;
        width: 100%;
        justify-content: center;
        gap: 7%;
        min-height: 80px;
        svg {
          width: 25px;
          height: auto;
          path {
            fill: colors.$mint;
          }
        }
      }
    }
  }
}

@media screen and (min-width: 900px) {
  .sidebar {
    display: none !important;
  }
}
</file>

<file path=".gitignore">
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Build outputs
.next/
out/
dist/
build/

# Production builds
*.tgz
*.tar.gz

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
logs/
*.log

# Coverage directory
coverage/
*.lcov

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# TypeScript
*.tsbuildinfo
next-env.d.ts

# Vercel
.vercel

# Backup files
*.backup
</file>

<file path="src/styles/globals.scss">
@use "./colors.scss";
@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap");

:root {
  --font-recoleta: 'Recoleta', 'Roboto', sans-serif;
  --font-roboto: 'Roboto', sans-serif;
  
  --spacing-xs: 0.5em;
  --spacing-sm: 1em;
  --spacing-md: 2em;
  --spacing-lg: 3em;
  --spacing-xl: 4em;
  --spacing-xxl: 6em;
  
  --transition-fast: all 0.2s ease;
  --transition-normal: all 0.3s ease;
  --transition-slow: all 0.5s ease;
  
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.5rem;
  --font-size-2xl: 2rem;
  --font-size-3xl: 3rem;
  
  --radius-sm: 5px;
  --radius-md: 10px;
  --radius-lg: 15px;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  overflow-x: hidden;
  scroll-behavior: smooth;
}

body {
  overflow-x: hidden;
  background-color: colors.$mint;
  font-family: var(--font-recoleta);
  font-weight: 300;
  line-height: 1.6;
}

::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: colors.$mint;
}

::-webkit-scrollbar-thumb {
  background: colors.$green;
  border-radius: 1px;
}

::-webkit-scrollbar-thumb:hover {
  background: colors.$black;
}

main {
  margin: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 0 var(--spacing-md);
}

h1 {
  font-size: var(--font-size-2xl);
  font-weight: 700;
  font-family: var(--font-recoleta);
  color: colors.$black;
}

h2 {
  font-size: var(--font-size-xl);
  font-weight: 600;
  font-family: var(--font-recoleta);
  color: colors.$black;
}

h3 {
  font-size: var(--font-size-lg);
  font-weight: 500;
  font-family: var(--font-recoleta);
  color: colors.$black;
}

p {
  font-size: var(--font-size-base);
  font-family: var(--font-roboto);
  color: colors.$black;
}

a {
  text-decoration: none;
  color: inherit;
  transition: var(--transition-normal);
  
  &:hover {
    color: colors.$green;
  }
}

button {
  cursor: pointer;
  border: none;
  outline: none;
  transition: var(--transition-normal);
  font-family: var(--font-roboto);
  
  &:focus-visible {
    outline: 2px solid colors.$green;
    outline-offset: 2px;
  }
}

section {
  margin: var(--spacing-xl) 0;
}

section.contact {
  margin: var(--spacing-xxl) 0;
}

.title {
  border-bottom: colors.$green 2px dotted;
  font-size: var(--font-size-3xl);
  font-weight: 700;
  font-family: var(--font-recoleta);
  color: colors.$black;
}

.tags {
  li {
    border-bottom: colors.$green 2px dotted;
  }
}

.mywork-container,
.featuredProjects-container,
.aboutme-container {
  overflow: visible;
}

.mywork {
  overflow: visible;
}

ul, ol {
  overflow: visible;
}

.project {
  overflow: visible;
}

.project-links,
.ftProject-links {
  a {
    svg:hover {
      path {
        fill: colors.$green;
      }
    }
  }
}

svg {
  path {
    fill: colors.$green;
  }
}

@media screen and (max-width: 900px) {
  .floating-social,
  .floating-mail {
    display: none;
  }
  
  main {
    padding: 0 var(--spacing-sm);
  }
  
  .title {
    font-size: 2.5rem;
  }
}

@media screen and (max-width: 600px) {
  .title {
    font-size: 2rem;
  }
}
</file>

<file path="src/styles/project.scss">
@use './colors.scss';
@use './mixins.scss';

.project {
  height: 100%;
  @include mixins.flex-container(column, nowrap, 1.5em);
  @include mixins.no-scroll;
  width: 100%;
  min-height: 350px;
  max-width: 100%;
  border: 1.8px dotted colors.$green;
  background-color: colors.$mint;
  padding: 1.5em;
  justify-content: space-between;
  @include mixins.smooth-transition(all, 0.33s);
  border-radius: 5px;
  .project-header {
    display: flex;
    width: 100%;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1em;
    
    #folder {
      path {
        fill: colors.$green;
      }
    }
    
    .project-links {
      display: flex;
      gap: 0.8em;
      
      a {
        color: colors.$green;
        @include mixins.smooth-transition(all, 0.3s);
        
        &:hover {
          color: colors.$black;
          transform: translateY(-2px);
        }
        
        svg {
          width: 28px;
          height: 28px;
        }
      }
    }
  }

  .project-title {
    font-size: 1.25em;
    font-weight: bold;
    color: colors.$green;
    margin-bottom: 0.8em;
    line-height: 1.3;
  }
  
  .project-description {
    font-size: 0.95em;
    color: colors.$pepper;
    margin-bottom: 1.2em;
    line-height: 1.5;
    flex-grow: 1;
  }

  .project-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.6em;
    margin-top: auto;
    list-style: none;
    
    li {
      background-color: rgba(4, 161, 117, 0.1);
      color: colors.$green;
      font-size: 0.8em;
      font-weight: 500;
      padding: 0.4em 0.8em;
      border-radius: 12px;
      border: 1px solid rgba(4, 161, 117, 0.2);
      white-space: nowrap;
      @include mixins.smooth-transition(all, 0.2s);
      
      &:hover {
        background-color: rgba(4, 161, 117, 0.15);
        border-color: rgba(4, 161, 117, 0.4);
        transform: translateY(-1px);
      }
    }
  }
}

.project:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0, 71, 71, 0.15);
  
  h3 {
    color: colors.$green;
  }
}
</file>

<file path="package.json">
{
  "name": "imsebarz",
  "version": "1.0.0",
  "description": "Sebastian Ruiz - Personal Portfolio Website",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "type-check": "tsc --noEmit",
    "type-check:watch": "tsc --noEmit --watch",
    "clean": "rm -rf .next out",
    "analyze": "ANALYZE=true npm run build",
    "preview": "npm run build && npm run start",
    "test:webhook": "node scripts/test-webhook.js",
    "test:direct": "node scripts/test-webhook.js --direct"
  },
  "dependencies": {
    "@notionhq/client": "^4.0.1",
    "axios": "^1.10.0",
    "framer-motion": "^12.23.5",
    "next": "^15.3.5",
    "openai": "^5.9.0",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-intersection-observer": "^9.16.0",
    "sass": "^1.89.2"
  },
  "devDependencies": {
    "@types/node": "^24.0.13",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "eslint": "^8.57.1",
    "eslint-config-next": "^15.3.5",
    "typescript": "^5.8.3"
  }
}
</file>

</files>
